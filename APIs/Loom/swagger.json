{
  "openapi": "3.0.1",
  "info": {
    "title": "Integration API",
    "description": "Loom integration API documentation",
    "version": "Integration V1",
    "x-logo": {
      "url": "https://portal.loom.co.za/assets/images/LoomLogo.jpg",
      "altText": "Loom logo"
    }
  },
  "paths": {
    "/api/services/app/Listing/CreateIS": {
      "post": {
        "tags": [
          "Listing"
        ],
        "summary": "CreateIS",
        "description": "Create a property listing via industry standard",
        "operationId": "CreateIS",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStdListingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStdListingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStdListingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStdListingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/services/app/Listing/Create": {
      "post": {
        "tags": [
          "Listing"
        ],
        "summary": "Create",
        "description": "Create a property listing",
        "operationId": "Create",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/Listing/Create\", Method.Post);\r\n            var body = new\r\n            {\r\n                sourceId = \"1\",\r\n                propertyId = \"L1\",\r\n                address = new\r\n                {\r\n                    unitNumber = \"00000\"\r\n                },\r\n                details = new\r\n                {\r\n                    sellingReason = \"Default\",\r\n                    listingPrice = \"2000000\",\r\n                    listingDate = \"2020/01/01\"\r\n                },\r\n                property = new\r\n                {\r\n                    propertyUse = \"MainResidence\",\r\n                    propertyType = \"House\",\r\n                    erfNumber = \"1\",\r\n                    sectionNumber = \"1\",\r\n                    doorUnitNumber = \"1\",\r\n                    vehicleBayNumber = \"1\",\r\n                    vehicleSectionNumber = \"1\",\r\n                    legal = new\r\n                    {\r\n                        ownershipType = \"Freehold\"\r\n                    },\r\n                    lifestyleFixtures = new\r\n                    {\r\n                        newDevelopment = false\r\n                    },\r\n                    exteriorFeatures = new\r\n                    {\r\n                        constructionType = \"Standard\",\r\n                        roofType = \"Insulation\",\r\n                        thatchOnProperty = true\r\n                    },\r\n                    address = new\r\n                    {\r\n                        streetNumber = \"1\",\r\n                        street = \"Demo Street\",\r\n                        complex = \"DemoComplex\"\r\n                    }\r\n                }\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/Listing/Create\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"propertyId\\\":\\\"L10\\\",\\\"sourceId\\\":\\\"1\\\",\\\"property\\\":{\\\"propertyUse\\\":\\\"MainResidence\\\",\\\"propertyType\\\":\\\"House\\\",\\\"erfNumber\\\":\\\"1\\\",\\\"sectionNumber\\\":\\\"1\\\",\\\"doorUnitNumber\\\":\\\"1\\\",\\\"vehicleBayNumber\\\":\\\"1\\\",\\\"vehicleSectionNumber\\\":\\\"1\\\",\\\"legal\\\":{\\\"ownershipType\\\":\\\"Freehold\\\"},\\\"exteriorFeatures\\\":{\\\"constructionType\\\":\\\"Standard\\\",\\\"roofType\\\":\\\"Insulation\\\",\\\"thatchOnProperty\\\":\\\"true\\\"},\\\"address\\\":{\\\"unitNumber\\\":\\\"00000\\\",\\\"streetNumber\\\":\\\"1\\\",\\\"street\\\":\\\"Demo Street\\\",\\\"complex\\\":\\\"DemoComplex\\\"}},\\\"details\\\":{\\\"sellingReason\\\":\\\"Default\\\",\\\"listingPrice\\\":\\\"2000000\\\",\\\"listingDate\\\":\\\"2022-01-01\\\"}}\""
          }
        ]
      }
    },
    "/api/services/app/Listing/UploadImage": {
      "post": {
        "tags": [
          "Listing"
        ],
        "summary": "Upload Image",
        "description": "Upload Listing Image",
        "operationId": "Upload",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadListingImageDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadListingImageDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadListingImageDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadListingImageDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n                RestRequest request = new(\"/api/services/app/Listing/UploadImage\", Method.Post);\r\n\t\t\t\tvar base64 = \"iVBORw0KGgoAAAANSUhEUgAAAG4AAAAkCAMAAABfRv/DAAAB9VBMVEUAAAAAAAAAAABVVVVAQEAzMzMrKyskJCRAQEA5OTkzMzMuLi4rKys7Jzs3NzczMzMtLS0xMTEuLi43LDc1NTUzMzMxMTHrWGIvLy/sXl43Li41NTUzMzMwMDA2Li41NTUzMzMwMDA2Ly80LjQzMzMyMjIxMTE1Ly80LjQ1MDAzMzMyMjIxMTE1MDA0LzQyMjI1MDA0MDQyMjIxMTE1MTE0MDQyMjIxMTE0MDQ0MDTxXWAzMDMyMjIyMjI0MTEzMDMyMjIzMDMyMjIyMjI0MTEzMDPxW2AyMDIyMjI0MTHvW2EyMjI0MTEzMDMyMDI0MjIzMDMyMjIzMDMzMTEzMDMyMDIzMTEzMTMzMTPxW2EyMDIzMTEzMTMzMTEzMjIyMDI0MDIzMTMzMjIzMTEzMTMyMTIzMjIzMTMzMTEyMTIzMjI0MTIzMDIzMjIzMTMzMDIyMTI0MTIzMjIzMTIzMjIyMTI0MTIzMjIzMTEzMTIyMTIzMTIzMTE0MTIzMTIzMTIzMTIzMjIzMTIzMjIzMTMzMTIzMTIzMTMzMTIzMTIzMTIzMTIzMTIzMTIzMTEzMTIzMTIzMTIzMTIzMTEzMTIzMTIzMTIzMTIzMDIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTLwXGH////sDv+xAAAApHRSTlMAAQIDBAUGBwgJCgsMDQ4PERUWFxgZGhobGxwdHiAhIiMlJicoKSorLDAyMzQ1Njg6Oz0+P0BCQ0VKSktMTU5QUVVWV1haWltcXl9hY2RlZ2prb3J5enx9fn5/gYOHi46PkpWWl5ianKCipKipqquusbK0uLm7vL6/wsXHycvMzdHT1tjZ2tve4OHi5OXm6Onq6+zt7u/w8fLz9PX29/n6+/z9/gFaUQsAAAABYktHRKa3sBuVAAACcElEQVRIx+2X11MTURSHDxFiAZPF3lCpoqI0C8ECGhUp9gIqWMCGEiHGithFhSjVihHZ3c//04dskg1kZpNxwgOT39OZb86cb++dO/fOCknNUZEjf02ROa9rcSUtK0RWVhu5YOhcMiupTulSuv/QORR7jFZ7XvmatJk4e/uWrGnIqSwKFvMUJd1SV6QzPmNq3q0A4G9eHI0P9QFTDyrMrB7UEhEReQlPLHUVwHSb+6dxR7zdZKKZHoNql0zrvgJ0iIhsA75EjVnd0NAQh65KBb59mAT8SyLYA+j+MYDz0XTMLiLXADJnbJSlzjECn2ts4mzVwBPGdYAnR2RHP2iVYdwLsF8kYwQgP3HdafhVJCIiZ2FqbQg/B1+aiIgyAN5w9wBAl8heAHaZBy13u93WOh/cCFbpo3DcoMtA3xgsT8Bvm4FtfwACDukCoN48yAVY6/qhzih7oM0oy+CjURYAq0IrALUXGp0BJvvgXOK6d5GP9EZ0pTAQQ1cC/mPwqAm6b0J74rr70BmsMoYjm5kN5AbLJtNm1sAzZwDtNdQ2Q0/iulOgVoaOirrOdAS9NhERxyB0m5rvyV2A8fmN8CJxXdYQ/DipyIYOHbrC+ADgLRTbzleglYZoG1yVfQDXpQqG4tEB8N0RQntUQJ0EGMyOdHYCfJ0AaDXDM5IxCpRJIWj2eHUsDbPDAQO9KTB1LrxtUP2yLQwfw0GRdnifJllAjoVua8gWMF31+XcmgE8Xp93+tU8B3bfbhHrRS0TyfQ/dIjKMtt5CJ04lmOjRC4rLc2O8S87NxZlxv3cxdclLSpfSJahL4i+JOS2GbhYzt3X/AL1AYf6Z3kC3AAAAAElFTkSuQmCC\";\r\n                var body = new\r\n                {\r\n                    sourceId = \"1\",\r\n                    base64Image = base64,\r\n                    imageType = \"PNG\",\r\n                };\r\n                request.AddJsonBody(body);\r\n\r\n                request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n                request.AddHeader(\"clientIdentifier\", client_identifier);\r\n                request.AddHeader(\"userEmail\", userEmail);\r\n                var response = client.Execute(request);\r\n                if (response.IsSuccessful)\r\n                    Console.WriteLine(response?.Content);\r\n                else\r\n                {\r\n                    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n                }\r\n                Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/Listing/UploadImage\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"base64Image\\\":\\\"iVBORw0KGgoAAAANSUhEUgAAAG4AAAAkCAMAAABfRv/DAAAB9VBMVEUAAAAAAAAAAABVVVVAQEAzMzMrKyskJCRAQEA5OTkzMzMuLi4rKys7Jzs3NzczMzMtLS0xMTEuLi43LDc1NTUzMzMxMTHrWGIvLy/sXl43Li41NTUzMzMwMDA2Li41NTUzMzMwMDA2Ly80LjQzMzMyMjIxMTE1Ly80LjQ1MDAzMzMyMjIxMTE1MDA0LzQyMjI1MDA0MDQyMjIxMTE1MTE0MDQyMjIxMTE0MDQ0MDTxXWAzMDMyMjIyMjI0MTEzMDMyMjIzMDMyMjIyMjI0MTEzMDPxW2AyMDIyMjI0MTHvW2EyMjI0MTEzMDMyMDI0MjIzMDMyMjIzMDMzMTEzMDMyMDIzMTEzMTMzMTPxW2EyMDIzMTEzMTMzMTEzMjIyMDI0MDIzMTMzMjIzMTEzMTMyMTIzMjIzMTMzMTEyMTIzMjI0MTIzMDIzMjIzMTMzMDIyMTI0MTIzMjIzMTIzMjIyMTI0MTIzMjIzMTEzMTIyMTIzMTIzMTE0MTIzMTIzMTIzMTIzMjIzMTIzMjIzMTMzMTIzMTIzMTMzMTIzMTIzMTIzMTIzMTIzMTIzMTEzMTIzMTIzMTIzMTIzMTEzMTIzMTIzMTIzMTIzMDIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTIzMTLwXGH////sDv+xAAAApHRSTlMAAQIDBAUGBwgJCgsMDQ4PERUWFxgZGhobGxwdHiAhIiMlJicoKSorLDAyMzQ1Njg6Oz0+P0BCQ0VKSktMTU5QUVVWV1haWltcXl9hY2RlZ2prb3J5enx9fn5/gYOHi46PkpWWl5ianKCipKipqquusbK0uLm7vL6/wsXHycvMzdHT1tjZ2tve4OHi5OXm6Onq6+zt7u/w8fLz9PX29/n6+/z9/gFaUQsAAAABYktHRKa3sBuVAAACcElEQVRIx+2X11MTURSHDxFiAZPF3lCpoqI0C8ECGhUp9gIqWMCGEiHGithFhSjVihHZ3c//04dskg1kZpNxwgOT39OZb86cb++dO/fOCknNUZEjf02ROa9rcSUtK0RWVhu5YOhcMiupTulSuv/QORR7jFZ7XvmatJk4e/uWrGnIqSwKFvMUJd1SV6QzPmNq3q0A4G9eHI0P9QFTDyrMrB7UEhEReQlPLHUVwHSb+6dxR7zdZKKZHoNql0zrvgJ0iIhsA75EjVnd0NAQh65KBb59mAT8SyLYA+j+MYDz0XTMLiLXADJnbJSlzjECn2ts4mzVwBPGdYAnR2RHP2iVYdwLsF8kYwQgP3HdafhVJCIiZ2FqbQg/B1+aiIgyAN5w9wBAl8heAHaZBy13u93WOh/cCFbpo3DcoMtA3xgsT8Bvm4FtfwACDukCoN48yAVY6/qhzih7oM0oy+CjURYAq0IrALUXGp0BJvvgXOK6d5GP9EZ0pTAQQ1cC/mPwqAm6b0J74rr70BmsMoYjm5kN5AbLJtNm1sAzZwDtNdQ2Q0/iulOgVoaOirrOdAS9NhERxyB0m5rvyV2A8fmN8CJxXdYQ/DipyIYOHbrC+ADgLRTbzleglYZoG1yVfQDXpQqG4tEB8N0RQntUQJ0EGMyOdHYCfJ0AaDXDM5IxCpRJIWj2eHUsDbPDAQO9KTB1LrxtUP2yLQwfw0GRdnifJllAjoVua8gWMF31+XcmgE8Xp93+tU8B3bfbhHrRS0TyfQ/dIjKMtt5CJ04lmOjRC4rLc2O8S87NxZlxv3cxdclLSpfSJahL4i+JOS2GbhYzt3X/AL1AYf6Z3kC3AAAAAElFTkSuQmCC\\\",\\\"sourceId\\\":\\\"1\\\",\\\"imageType\\\":\\\"PNG\\\"}\""
          }
        ]
      }
    },
    "/api/services/app/Listing/Update": {
      "put": {
        "tags": [
          "Listing"
        ],
        "summary": "Update",
        "description": "Update a property listing",
        "operationId": "Update",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateListingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateListingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateListingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateListingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/Listing/Update\", Method.Put);\r\n            var body = new\r\n            {\r\n                sourceId = \"1\",\r\n                propertyId = \"L1\",\r\n                address = new\r\n                {\r\n                    unitNumber = \"00000\"\r\n                },\r\n                details = new\r\n                {\r\n                    sellingReason = \"Default\",\r\n                    listingPrice = \"2000000\",\r\n                    listingDate = \"2020/01/01\"\r\n                },\r\n                property = new\r\n                {\r\n                    propertyUse = \"MainResidence\",\r\n                    propertyType = \"House\",\r\n                    erfNumber = \"1\",\r\n                    sectionNumber = \"1\",\r\n                    doorUnitNumber = \"1\",\r\n                    vehicleBayNumber = \"1\",\r\n                    vehicleSectionNumber = \"1\",\r\n                    legal = new\r\n                    {\r\n                        ownershipType = \"Freehold\"\r\n                    },\r\n                    lifestyleFixtures = new\r\n                    {\r\n                        newDevelopment = false\r\n                    },\r\n                    exteriorFeatures = new\r\n                    {\r\n                        constructionType = \"Standard\",\r\n                        roofType = \"Insulation\",\r\n                        thatchOnProperty = true\r\n                    },\r\n                    address = new\r\n                    {\r\n                        streetNumber = \"1\",\r\n                        street = \"Demo Street\",\r\n                        complex = \"DemoComplex\"\r\n                    }\r\n                }\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X PUT \"http://host/api/services/app/Listing/Update\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"propertyId\\\":\\\"L10\\\",\\\"sourceId\\\":\\\"1\\\",\\\"property\\\":{\\\"propertyUse\\\":\\\"MainResidence\\\",\\\"propertyType\\\":\\\"House\\\",\\\"erfNumber\\\":\\\"1\\\",\\\"sectionNumber\\\":\\\"1\\\",\\\"doorUnitNumber\\\":\\\"1\\\",\\\"vehicleBayNumber\\\":\\\"1\\\",\\\"vehicleSectionNumber\\\":\\\"1\\\",\\\"legal\\\":{\\\"ownershipType\\\":\\\"Freehold\\\"},\\\"exteriorFeatures\\\":{\\\"constructionType\\\":\\\"Standard\\\",\\\"roofType\\\":\\\"Insulation\\\",\\\"thatchOnProperty\\\":\\\"true\\\"},\\\"address\\\":{\\\"unitNumber\\\":\\\"00000\\\",\\\"streetNumber\\\":\\\"1\\\",\\\"street\\\":\\\"Demo Street\\\",\\\"complex\\\":\\\"DemoComplex\\\"}},\\\"details\\\":{\\\"sellingReason\\\":\\\"Default\\\",\\\"listingPrice\\\":\\\"2000000\\\",\\\"listingDate\\\":\\\"2022-01-01\\\"}}\""
          }
        ]
      }
    },
    "/api/services/app/Listing/GetAll": {
      "get": {
        "tags": [
          "Listing"
        ],
        "summary": "GetAll",
        "description": "Request a filtered listing list",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "Street",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "description": "Street Name",
              "example": "De Hoeve"
            }
          },
          {
            "name": "FromDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "From date filter",
              "format": "date-time",
              "example": "2023-01-01"
            }
          },
          {
            "name": "ToDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "To date filter",
              "format": "date-time",
              "example": "2023-03-30"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Skip Count",
              "format": "int32",
              "example": "0"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Take Count (Max 100)",
              "format": "int32",
              "example": "10"
            }
          },
          {
            "name": "Suburb",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Suburb filter",
              "example": "Eldoraigne"
            }
          },
          {
            "name": "Town",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Town filter",
              "example": "Centurion"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingDtoPagedResultDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Listing/GetAll\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"street\", \"Demo Street\");\r\n            request.AddParameter(\"fromDate\", \"2020/01/01\");\r\n            request.AddParameter(\"toDate\", \"2023/05/27\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Listing/GetAll?street=Demo%20Street&fromDate=2020/01/01&toDate=2023/05/27\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Otp/Create": {
      "post": {
        "tags": [
          "Offer to Purchase (OTP)"
        ],
        "summary": "Create",
        "description": "Create an offer to purchase",
        "operationId": "Create",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOtpDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOtpDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOtpDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/Otp/Create\", Method.Post);\r\n            var body = new\r\n            {\r\n                sourceId = \"1\",\r\n                propertyId = \"L1\",\r\n                applicationStatus = \"Registered\",\r\n                address = new\r\n                {\r\n                    unitNumber = \"00000\"\r\n                },\r\n                offer = new\r\n                {\r\n                    bonded = true,\r\n                    signDate = \"2020/01/01\",\r\n                    purchasePrice = 1500000,\r\n                    mortgageLoan = 300000\r\n                },\r\n                property = new\r\n                {\r\n                    propertyUse = \"MainResidence\",\r\n                    propertyType = \"House\",\r\n                    erfNumber = \"1\",\r\n                    sectionNumber = \"1\",\r\n                    doorUnitNumber = \"1\",\r\n                    vehicleBayNumber = \"1\",\r\n                    vehicleSectionNumber = \"1\",\r\n                    legal = new\r\n                    {\r\n                        ownershipType = \"Freehold\"\r\n                    },\r\n                    lifestyleFixtures = new\r\n                    {\r\n                        newDevelopment = false\r\n                    },\r\n                    exteriorFeatures = new\r\n                    {\r\n                        constructionType = \"Standard\",\r\n                        roofType = \"Insulation\",\r\n                        thatchOnProperty = true\r\n                    },\r\n                    address = new\r\n                    {\r\n                        streetNumber = \"1\",\r\n                        street = \"Demo Street\",\r\n                        complex = \"DemoComplex\"\r\n                    }\r\n                }\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/Otp/Create\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"propertyId\\\":\\\"L10\\\",\\\"sourceId\\\":\\\"1\\\",\\\"applicationStatus\\\":\\\"Registered\\\",\\\"property\\\":{\\\"propertyUse\\\":\\\"MainResidence\\\",\\\"propertyType\\\":\\\"House\\\",\\\"erfNumber\\\":\\\"1\\\",\\\"sectionNumber\\\":\\\"1\\\",\\\"doorUnitNumber\\\":\\\"1\\\",\\\"vehicleBayNumber\\\":\\\"1\\\",\\\"vehicleSectionNumber\\\":\\\"1\\\",\\\"legal\\\":{\\\"ownershipType\\\":\\\"Freehold\\\"},\\\"exteriorFeatures\\\":{\\\"constructionType\\\":\\\"Standard\\\",\\\"roofType\\\":\\\"Insulation\\\",\\\"thatchOnProperty\\\":\\\"true\\\"},\\\"address\\\":{\\\"unitNumber\\\":\\\"00000\\\",\\\"streetNumber\\\":\\\"1\\\",\\\"street\\\":\\\"Demo Street\\\",\\\"complex\\\":\\\"DemoComplex\\\"}},\\\"offer\\\":{\\\"bonded\\\":\\\"true\\\",\\\"purchasePrice\\\":\\\"1500000\\\",\\\"signDate\\\":\\\"2022-01-01\\\",\\\"mortageLoan\\\":\\\"300000\\\"}}\""
          }
        ]
      }
    },
    "/api/services/app/Otp/Update": {
      "put": {
        "tags": [
          "Offer to Purchase (OTP)"
        ],
        "summary": "Update",
        "description": "Update an offer to purchase",
        "operationId": "Update",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOtpDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOtpDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOtpDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/Otp/Update\", Method.Put);\r\n            var body = new\r\n            {\r\n                idString = \"12345\",\r\n                sourceId = \"1\",\r\n                propertyId = \"L1\",\r\n                applicationStatus = \"Registered\",\r\n                address = new\r\n                {\r\n                    unitNumber = \"00000\"\r\n                },\r\n                offer = new\r\n                {\r\n                    bonded = true,\r\n                    signDate = \"2020/01/01\",\r\n                    purchasePrice = 1500000,\r\n                    mortgageLoan = 300000\r\n                },\r\n                property = new\r\n                {\r\n                    propertyUse = \"MainResidence\",\r\n                    propertyType = \"House\",\r\n                    erfNumber = \"1\",\r\n                    sectionNumber = \"1\",\r\n                    doorUnitNumber = \"1\",\r\n                    vehicleBayNumber = \"1\",\r\n                    vehicleSectionNumber = \"1\",\r\n                    legal = new\r\n                    {\r\n                        ownershipType = \"Freehold\"\r\n                    },\r\n                    lifestyleFixtures = new\r\n                    {\r\n                        newDevelopment = false\r\n                    },\r\n                    exteriorFeatures = new\r\n                    {\r\n                        constructionType = \"Standard\",\r\n                        roofType = \"Insulation\",\r\n                        thatchOnProperty = true\r\n                    },\r\n                    address = new\r\n                    {\r\n                        streetNumber = \"1\",\r\n                        street = \"Demo Street\",\r\n                        complex = \"DemoComplex\"\r\n                    }\r\n                }\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X PUT \"http://host/api/services/app/Otp/Update\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"idString\\\":\\\"12345\\\"\\\"propertyId\\\":\\\"L10\\\",\\\"sourceId\\\":\\\"1\\\",\\\"applicationStatus\\\":\\\"Registered\\\",\\\"property\\\":{\\\"propertyUse\\\":\\\"MainResidence\\\",\\\"propertyType\\\":\\\"House\\\",\\\"erfNumber\\\":\\\"1\\\",\\\"sectionNumber\\\":\\\"1\\\",\\\"doorUnitNumber\\\":\\\"1\\\",\\\"vehicleBayNumber\\\":\\\"1\\\",\\\"vehicleSectionNumber\\\":\\\"1\\\",\\\"legal\\\":{\\\"ownershipType\\\":\\\"Freehold\\\"},\\\"exteriorFeatures\\\":{\\\"constructionType\\\":\\\"Standard\\\",\\\"roofType\\\":\\\"Insulation\\\",\\\"thatchOnProperty\\\":\\\"true\\\"},\\\"address\\\":{\\\"unitNumber\\\":\\\"00000\\\",\\\"streetNumber\\\":\\\"1\\\",\\\"street\\\":\\\"Demo Street\\\",\\\"complex\\\":\\\"DemoComplex\\\"}},\\\"offer\\\":{\\\"bonded\\\":\\\"true\\\",\\\"purchasePrice\\\":\\\"1500000\\\",\\\"signDate\\\":\\\"2022-01-01\\\",\\\"mortageLoan\\\":\\\"300000\\\"}}\""
          }
        ]
      }
    },
    "/api/services/app/Otp/GetAll": {
      "get": {
        "tags": [
          "Offer to Purchase (OTP)"
        ],
        "summary": "GetAll",
        "description": "Request a filtered offer to purchase list",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "Street",
            "in": "query",
            "schema": {
              "maxLength": 100,
              "type": "string",
              "description": "Street Name",
              "example": "De Hoeve"
            }
          },
          {
            "name": "FromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "From date filter",
              "format": "date-time",
              "example": "2023-01-01"
            }
          },
          {
            "name": "ToDate",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "To date filter",
              "format": "date-time",
              "example": "2023-03-30"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Skip Count",
              "format": "int32",
              "example": "0"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Take Count (Max 100)",
              "format": "int32",
              "example": "10"
            }
          },
          {
            "name": "Suburb",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Suburb filter",
              "example": "Eldoraigne"
            }
          },
          {
            "name": "Town",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Town filter",
              "example": "Centurion"
            }
          },
          {
            "name": "AMS",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "AMS filter",
              "example": "true"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OtpDtoPagedResultDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Otp/GetAll\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"street\", \"Demo Street\");\r\n            request.AddParameter(\"fromDate\", \"2020/01/01\");\r\n            request.AddParameter(\"toDate\", \"2023/05/27\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Otp/GetAll?street=Demo%20Street&fromDate=2020/01/01&toDate=2023/05/27\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Area/Get": {
      "get": {
        "tags": [
          "Area"
        ],
        "summary": "Get",
        "description": "Get saved area information",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id of area",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Area/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"id\", \"1\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Area/Get?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Area/GetAll": {
      "get": {
        "tags": [
          "Area"
        ],
        "summary": "GetAll",
        "description": "Get saved areas for user",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "SortingOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Creation Date Sorting ascending(asc) or descending(desc)",
              "example": "asc"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Limit of results that should be returned",
              "format": "int32",
              "example": "5"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Number of items to be skipped",
              "format": "int32",
              "example": "0"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDtoPagedResultDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Area/GetAll\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"sortingOrder\", \"asc\");\r\n            request.AddParameter(\"maxResultCount\", \"5\");\r\n            request.AddParameter(\"skipCount\", \"0\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Area/GetAll?sortingOrder=asc&maxResultCount=5&skipCount=0\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Area/Delete": {
      "delete": {
        "tags": [
          "Area"
        ],
        "summary": "Delete",
        "description": "Delete area",
        "operationId": "Delete",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id of area",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/Area/Delete\", Method.Delete);\r\n            \r\n            request.AddParameter(\"id\",\"1\");\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X DELETE \"http://host/api/services/app/Area/Delete?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Area/Create": {
      "post": {
        "tags": [
          "Area"
        ],
        "summary": "Create",
        "description": "Create area",
        "operationId": "Create",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaCreateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/Area/Create\", Method.Post);\r\n            var body = new\r\n            {\r\n                id = \"1\",\r\n                name = \"myArea\",\r\n                geometryJson = \"[{\\\"id\\\":\\\"1\\\",\\\"type\\\":\\\"neighbourhood\\\",\\\"name\\\":\\\"geometryItem1\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000]]]}}]\",\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/Area/Create\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"name\\\":\\\"MyArea\\\",\\\"id\\\":\\\"1\\\",\\\"geometryJson\\\":\\\"[{'id':'1','type':'neighbourhood','name':'geometryItem1','geometry':{'type':'Polygon','coordinates':[[[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000]]]}}]\\\"}\""
          }
        ]
      }
    },
    "/api/services/app/Area/Update": {
      "put": {
        "tags": [
          "Area"
        ],
        "summary": "Update",
        "description": "Update area",
        "operationId": "Update",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/Area/Update\", Method.Put);\r\n            var body = new\r\n            {\r\n                id = \"1\",\r\n                name = \"myArea\",\r\n                rSAreaId = \"CFB00DD0-000C-0000-A0DE-EF0DEDDAE000\",\r\n                geometryJson = \"[{\\\"id\\\":\\\"1\\\",\\\"type\\\":\\\"neighbourhood\\\",\\\"name\\\":\\\"geometryItem1\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000]]]}}]\",\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X PUT \"http://host/api/services/app/Area/Update\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"name\\\":\\\"MyArea\\\",\\\"id\\\":\\\"1\\\",\\\"rSAreaId\\\":\\\"CFB00DD0-000C-0000-A0DE-EF0DEDDAE000\\\",\\\"geometryJson\\\":\\\"[{'id':'1','type':'neighbourhood','name':'geometryItem1','geometry':{'type':'Polygon','coordinates':[[[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000]]]}}]\\\"}\""
          }
        ]
      }
    },
    "/api/services/app/Area/RequestContactDetails": {
      "post": {
        "tags": [
          "Area"
        ],
        "summary": "RequestContactDetails",
        "description": "Request Contacts",
        "operationId": "RequestContactDetails",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaContactDetailRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaContactDetailRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaContactDetailRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaContactDetailRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaContactDetailResponseModel"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Report/RequestPropertiesContactDetails\", Method.Post);\r\n\r\n            var body = new\r\n                {\r\n                    SaleAll = false,\r\n                    Sale0To1Year = false,\r\n                    Sale1To3Years = false,\r\n                    Sale3To5Years = false,\r\n                    Sale5to8Years = false,\r\n                    Sale8PlusYears = false,\r\n                    AgeAll = false,\r\n                    Age18To35Years = false,\r\n                    Age36To49Years = false,\r\n                    Age50To65Years = false,\r\n                    Age65PlusYears = false,\r\n                    FullTitle = false,\r\n                    SectionalTitle = false,\r\n                    FullNameAndId = false,\r\n                    \r\n                    ContactNumber = true,\r\n                    \r\n                    Email = false,\r\n\r\n                    QueryId = \"<SOME GUID>\",\r\n                    ReportName = \"Report Name\",\r\n                    Source = \"Source\",\r\n                    TenantId = 0,\r\n\r\n                    OnBehalfOfEmail = \"\",\r\n                    MaxNumbers = 100\r\n                };\r\n\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/Report/RequestPropertiesContactDetails\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/AreaReport/Get": {
      "get": {
        "tags": [
          "AreaReport"
        ],
        "summary": "Get",
        "description": "Get area report",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id of area report",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaReportSavedDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/AreaReport/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"id\", \"1\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/AreaReport/Get?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/AreaReport/RequestReport": {
      "post": {
        "tags": [
          "AreaReport"
        ],
        "summary": "RequestReport",
        "description": "Request Report",
        "operationId": "RequestReport",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaReportAreaRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaReportAreaRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaReportAreaRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaReportAreaRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportRequestResponseDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/AreaReport/RequestReport\", Method.Post);\r\n            var body = new\r\n            {\r\n                id = 1\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/AreaReport/RequestReport\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"id\\\":\\\"1\\\"}\""
          }
        ]
      }
    },
    "/api/services/app/AreaReport/GetReport": {
      "get": {
        "tags": [
          "AreaReport"
        ],
        "summary": "GetReport",
        "description": "Get Report for Version by VersionId",
        "operationId": "GetReport",
        "parameters": [
          {
            "name": "VersionId",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "VersionId of report",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/AreaReport/GetReport\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"versionId\", \"1\");\r\n\r\n            var response = client.DownloadData(request);\r\n\r\n                if (response != null)\r\n                {\r\n                    File.WriteAllBytes(\"download.pdf\", response);\r\n\t\t\t\t    Console.WriteLine(\"File downloaded\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine($\"Error\");\r\n                }\r\n                Console.WriteLine(DateTime.Now);\r\n                Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/AreaReport/GetReport?versionId=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/AreaReport/Create": {
      "post": {
        "tags": [
          "AreaReport"
        ],
        "summary": "Create",
        "description": "Generate report for area with given id",
        "operationId": "Create",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaReportAreaRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaReportAreaRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaReportAreaRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AreaReportAreaRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaReportDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\nRestRequest request = new(\"/api/services/app/AreaReport/Create\", Method.Post);\r\n\r\nrequest.AddJsonBody(new \r\n{\r\n    id = 1\r\n});\r\n\r\nrequest.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\nrequest.AddHeader(\"clientIdentifier\", client_identifier);\r\nrequest.AddHeader(\"userEmail\", userEmail);\r\n\r\nvar response = client.Execute(request);\r\nif (response.IsSuccessful)\r\n    Console.WriteLine(response.Content);\r\nelse\r\n{\r\n    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n}\r\nConsole.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/AreaReport/Create\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H  \"Authorization: Bearer xxxx\" -d \"{\\\"id\\\":\\\"1\\\"}\"\r\n"
          }
        ]
      }
    },
    "/api/services/app/Cipc/CompanySearchWithFilters": {
      "get": {
        "tags": [
          "Cipc"
        ],
        "summary": "CompanySearchWithFilters",
        "description": "Search CIPC Companies with criteria",
        "operationId": "CompanySearchWithFilters",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanySearchWithFiltersResultsDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Cipc/CompanyInformationDependency": {
      "get": {
        "tags": [
          "Cipc"
        ],
        "summary": "CompanyInformationDependency",
        "description": "Return the details of the CIPC Company",
        "operationId": "CompanyInformationDependency",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyInformationDependecyDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyInformationDependecyDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyInformationDependecyDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyInformationDependecyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommercialInfoCompanyDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Cipc/GetDirectorContactDetails": {
      "get": {
        "tags": [
          "Cipc"
        ],
        "summary": "GetDirectorContactDetails",
        "description": "Get a director's contact details",
        "operationId": "GetDirectorContactDetails",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DirectorContactDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectorContactDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectorContactDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DirectorContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectorContactResponseDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Cipc/GetDirectorContactDetailsAllByReportId": {
      "get": {
        "tags": [
          "Cipc"
        ],
        "summary": "GetDirectorContactDetailsAllByReportId",
        "description": "Get all directors contact details for report you have access to",
        "operationId": "GetDirectorContactDetailsAllByReportId",
        "parameters": [
          {
            "name": "reportid",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectorContactResponseListDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Cipc/GetCipcCompanyReportById": {
      "get": {
        "tags": [
          "Cipc"
        ],
        "summary": "GetCipcCompanyReportById",
        "description": "Returns the CIPC Report from the id",
        "operationId": "GetCipcCompanyReportById",
        "parameters": [
          {
            "name": "reportid",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommercialInfoCompanyDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Consent/Get": {
      "get": {
        "tags": [
          "Consent"
        ],
        "summary": "Get",
        "description": "Gets latest consent terms in html format",
        "operationId": "Get",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/ContactDetails/Get": {
      "get": {
        "tags": [
          "ContactDetails"
        ],
        "summary": "Get",
        "description": "Get batch contact details",
        "operationId": "Get",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id of batch",
              "format": "int64",
              "example": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeedBatchInfoDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/ContactDetails/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"id\", \"1\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/ContactDetails/Get?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/ContactDetails/GetAll": {
      "get": {
        "tags": [
          "ContactDetails"
        ],
        "summary": "GetAll",
        "description": "Get saved contact batches for user",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "SortingOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Creation Date Sorting ascending(asc) or descending(desc)",
              "example": "asc"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Limit of results that should be returned",
              "format": "int32",
              "example": "5"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Number of items to be skipped",
              "format": "int32",
              "example": "0"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Report name",
              "example": "Sample address"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedContactDetailDtoPagedResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/ContactDetails/RemoveOwnersConsent": {
      "put": {
        "tags": [
          "ContactDetails"
        ],
        "summary": "RemoveOwnersConsent",
        "description": "Remove consent for provided id numbers",
        "operationId": "RemoveOwnersConsent",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentRemovalRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentRemovalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentRemovalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentRemovalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\nRestRequest request = new(\"/api/services/app/Valuation/RemoveOwnersConsent\", Method.Post);\r\nList<string> idNumbers = new List<string>\r\n{\r\n    \"9803230000000\",\r\n    \"9803230000001\"\r\n};\r\n\r\nrequest.AddJsonBody(new \r\n{\r\n    idNumbers = idNumbers,\r\n    userEmail = \"example@gmail.com\"\r\n});\r\n\r\nrequest.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\nvar response = client.Execute(request);\r\nif (response.IsSuccessful)\r\n    Console.WriteLine(response.Content);\r\nelse\r\n{\r\n    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n}\r\nConsole.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/Valuation/RemoveOwnersConsent\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H  \"Authorization: Bearer xxxx\" -d \"{\\\"userEmail\\\":\\\"example@gmail.com\\\",\\\"idNumbers\\\":[\\\"9803230000000\\\",\\\"9803230000001\\\"]}\"\r\n"
          }
        ]
      }
    },
    "/api/services/app/Map/GetFeature": {
      "get": {
        "tags": [
          "Map"
        ],
        "summary": "GetFeature",
        "description": "Get result of requested feature",
        "operationId": "GetFeature",
        "parameters": [
          {
            "name": "Latitude",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Latidude of feature (Either FeatureId or Latitude/Longitude can be passed)",
              "example": "-25.81316"
            }
          },
          {
            "name": "Longitude",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Longitude of feature (Either FeatureId or Latitude/Longitude can be passed)",
              "example": "28.298765"
            }
          },
          {
            "name": "FeatureId",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Id of feature (Either FeatureId or Latitude/Longitude can be passed)",
              "example": "799059029-K5G.VZV"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FeatureTypeEnum"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapFeatureDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Map/GetFeature\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"Latitude\", \"-25.81316\");\r\n            request.AddParameter(\"Longitude\", \"28.298765\");\r\n            request.AddParameter(\"Type\", \"Scheme\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Map/GetFeature?latitude=-25.81316&longitude=28.298765&type=Scheme\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Map/GetToken": {
      "get": {
        "tags": [
          "Map"
        ],
        "summary": "GetToken",
        "description": "Get map token",
        "operationId": "GetToken",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCdnTokenDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Map/GetToken\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Map/GetToken\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Map/GetLegends": {
      "get": {
        "tags": [
          "Map"
        ],
        "summary": "GetLegends",
        "description": "Get map legends",
        "operationId": "GetLegends",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapLegendDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Map/GetLegends\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Map/GetLegends\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/MarketArea/Get": {
      "get": {
        "tags": [
          "MarketArea"
        ],
        "summary": "Get",
        "description": "Get MarketArea",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "MarketAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "MarketArea Id",
              "example": "fe8a93f8-5d3c-11ef-a93c-032fad63bdf0"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketAreaDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/MarketArea/GetAll": {
      "get": {
        "tags": [
          "MarketArea"
        ],
        "summary": "GetAll",
        "description": "Report on MarketAreas With Paging",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Limit of results that should be returned",
              "format": "int",
              "example": "10"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Number of items to be skipped",
              "format": "int",
              "example": "0"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Market Area Name",
              "example": "Equestria"
            }
          },
          {
            "name": "Province",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Province Name",
              "example": "Gauteng"
            }
          },
          {
            "name": "Town",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Town Name",
              "example": "Pretoria"
            }
          },
          {
            "name": "MarketArea",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "By default this is true",
              "format": "bool",
              "example": "true"
            }
          },
          {
            "name": "MarketAreaExtension",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "By default this is true",
              "format": "bool"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketAreaListDtoPagedResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/MarketAreaReport/Get": {
      "get": {
        "tags": [
          "MarketAreaReport"
        ],
        "summary": "Get",
        "description": "Report on MarketAreas",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "MarketAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "MarketArea Id",
              "example": "fe8a93f8-5d3c-11ef-a93c-032fad63bdf0"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaReportDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/AreaReport/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"id\", \"1\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/AreaReport/Get?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Property/Get": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Get",
        "description": "Get property with provided key and unit number",
        "operationId": "Get",
        "parameters": [
          {
            "name": "PropertyKey",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Property key(SG Code)",
              "example": "T0JR00000000000000000"
            }
          },
          {
            "name": "UnitNumber",
            "in": "query",
            "schema": {
              "maxLength": 5,
              "type": "string",
              "description": "Unit number of property",
              "example": "00000"
            }
          },
          {
            "name": "Consent",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "Consent to Unmask Name And Surname",
              "format": "bool",
              "example": "true"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskskapePropertyDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Property/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"propertyKey\", \"T0JR00000000000000000\");\r\n            request.AddParameter(\"unitNumber\", \"00000\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Property/Get?propertyKey=T0JR00000000000000000&unitNumber=00000\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Property/LookUpPropertiesByPosition": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "LookUpPropertiesByPosition",
        "description": "Search for properties based on coordinates and range",
        "operationId": "LookUpPropertiesByPosition",
        "parameters": [
          {
            "name": "Lat",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Latitude",
              "example": "-10.0000"
            }
          },
          {
            "name": "Lon",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Longitude",
              "example": "10.0000"
            }
          },
          {
            "name": "Range",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Range",
              "example": "100"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyLookupDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/Property/GetUnitNumbers": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "GetUnitNumbers",
        "description": "Get scheme unit numbers",
        "operationId": "GetUnitNumbers",
        "parameters": [
          {
            "name": "PropertyKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Property key(SG Code) to request unit numbers",
              "example": "A0AA00000000000000000"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Property/GetUnitNumbers\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"propertyKey\", \"A0AA00000000000000000\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Property/GetUnitNumbers?propertyKey=A0AA00000000000000000\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Property/LookUpBuilding": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "LookUpBuilding",
        "description": "Search for building based on coordinates and direction",
        "operationId": "LookUpBuilding",
        "parameters": [
          {
            "name": "Heading",
            "in": "query",
            "schema": {
              "type": "number",
              "description": "Facing direction from north in degrees",
              "format": "double",
              "example": "90"
            }
          },
          {
            "name": "HeadingReference",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "State if Heading is Magnetic(M) or True(T) North",
              "example": "M"
            }
          },
          {
            "name": "Lat",
            "in": "query",
            "schema": {
              "type": "number",
              "description": "Latitude of building",
              "format": "double",
              "example": "-28.123456"
            }
          },
          {
            "name": "Lon",
            "in": "query",
            "schema": {
              "type": "number",
              "description": "Longitude of building",
              "format": "double",
              "example": "20.123456"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildingLookupDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Property/LookUpBuilding\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"heading\", \"90\");\r\n            request.AddParameter(\"headingReference\", \"M\");\r\n            request.AddParameter(\"lat\", \"-28.123456\");\r\n            request.AddParameter(\"lon\", \"20.123456\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Property/LookUpBuilding?heading=90&headingReference=M&lat=-28.123456&lon=20.123456\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Property/LookUpBuildingByPosition": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "LookUpBuildingByPosition",
        "description": "Search for building based on coordinates",
        "operationId": "LookUpBuildingByPosition",
        "parameters": [
          {
            "name": "Lat",
            "in": "query",
            "schema": {
              "type": "number",
              "description": "Latitude of building",
              "format": "double",
              "example": "-28.123456"
            }
          },
          {
            "name": "Lon",
            "in": "query",
            "schema": {
              "type": "number",
              "description": "Longitude of building",
              "format": "double",
              "example": "20.123456"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionLookupDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Property/LookUpBuildingByPosition\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"lat\", \"-28.123456\");\r\n            request.AddParameter(\"lon\", \"20.123456\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Property/LookUpBuildingByPosition?lat=-28.123456&lon=20.123456\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Property/GetSchemeUnitNumbers": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "GetSchemeUnitNumbers",
        "description": "Get unit numbers from scheme id",
        "operationId": "GetSchemeUnitNumbers",
        "parameters": [
          {
            "name": "schemeId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemeUnitDto"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Property/GetSchemeUnitNumbers\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"schemeId\", \"SchemeIdHere\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Property/GetSchemeUnitNumbers?schemeId=SchemeIdHere\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Property/GetOwnerNames": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "GetOwnerNames",
        "description": "Get owner names for a property",
        "operationId": "GetOwnerNames",
        "parameters": [
          {
            "name": "PropertyKey",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Property key(SG Code)",
              "example": "T0JR00000000000000000"
            }
          },
          {
            "name": "UnitNumber",
            "in": "query",
            "schema": {
              "maxLength": 5,
              "type": "string",
              "description": "Unit number of property",
              "example": "00000"
            }
          },
          {
            "name": "Consent",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "Consent to Unmask Name And Surname",
              "format": "bool",
              "example": "true"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeedNameDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/Property/GetOwnerNameAndIds": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "GetOwnerNameAndIds",
        "description": "Get owner names and id numbers for a property",
        "operationId": "GetOwnerNameAndIds",
        "parameters": [
          {
            "name": "PropertyKey",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Property key(SG Code)",
              "example": "T0JR00000000000000000"
            }
          },
          {
            "name": "UnitNumber",
            "in": "query",
            "schema": {
              "maxLength": 5,
              "type": "string",
              "description": "Unit number of property",
              "example": "00000"
            }
          },
          {
            "name": "Consent",
            "in": "query",
            "schema": {
              "type": "boolean",
              "description": "Consent to Unmask Name And Surname",
              "format": "bool",
              "example": "true"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeedNameIdDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/PropertyReport/RequestReport": {
      "post": {
        "tags": [
          "PropertyReport"
        ],
        "summary": "RequestReport",
        "description": "Request Report",
        "operationId": "RequestReport",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyReportGetPropertyRequestDtoExtended"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyReportGetPropertyRequestDtoExtended"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyReportGetPropertyRequestDtoExtended"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyReportGetPropertyRequestDtoExtended"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportRequestResponseDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/PropertyReport/RequestReport\", Method.Post);\r\n            var body = new\r\n            {\r\n                reportType = \"CustomReport\",\r\n                sections = \"propertyDetails,propertySummaryDescription,otherDetails,floorSizeCalculator,ownership,recentSalesAndRegistrations,salesHistoryInArea,averageQuarterlyGrowthRates,lOOMEstimation,listingInformation,confirmedSalesInformation,suburbTrends,nearbyServices,householdFinancialIndex,suburbPopulation,crimeStatistics,weather,solarFeasibility\",\r\n                unitNumber = \"00000\",\r\n                propertyKey = \"T0JR00000000000000000\",\r\n                includeOwnerCellNumbers = true,\r\n                consented = true,\r\n                purchaseValuation = true\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/PropertyReport/RequestReport\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"reportType\\\":\\\"customReport\\\",\\\"sections\\\":\\\"propertyDetails,propertySummaryDescription,otherDetails,floorSizeCalculator,ownership,recentSalesAndRegistrations,salesHistoryInArea,averageQuarterlyGrowthRates,lOOMEstimation,listingInformation,confirmedSalesInformation,suburbTrends,nearbyServices,householdFinancialIndex,suburbPopulation,crimeStatistics,weather,solarFeasibility\\\",\\\"unitNumber\\\":\\\"00000\\\",\\\"propertyKey\\\":\\\"T0JR00000000000000000\\\",\\\"includeOwnerCellNumbers\\\":\\\"true\\\",\\\"consented\\\":\\\"true\\\",\\\"purchaseValuation\\\":\\\"true\\\"}\""
          }
        ]
      }
    },
    "/api/services/app/PropertyReport/GetReport": {
      "get": {
        "tags": [
          "PropertyReport"
        ],
        "summary": "GetReport",
        "description": "Get Report for Version by VersionId",
        "operationId": "GetReport",
        "parameters": [
          {
            "name": "VersionId",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "VersionId of report",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/PropertyReport/GetReport\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"versionId\", \"1\");\r\n\r\n            var response = client.DownloadData(request);\r\n\r\n                if (response != null)\r\n                {\r\n                    File.WriteAllBytes(\"download.pdf\", response);\r\n\t\t\t\t    Console.WriteLine(\"File downloaded\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine($\"Error\");\r\n                }\r\n                Console.WriteLine(DateTime.Now);\r\n                Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/PropertyReport/GetReport?versionId=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/PropertyReport/Get": {
      "get": {
        "tags": [
          "PropertyReport"
        ],
        "summary": "Get",
        "description": "Get saved property report by id",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id of report",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyReportSavedDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/PropertyReport/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"id\", \"1\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/PropertyReport/Get?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/PropertyReport/GetAll": {
      "get": {
        "tags": [
          "PropertyReport"
        ],
        "summary": "GetAll",
        "description": "Get saved property reports for user",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "SortingOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Creation Date Sorting ascending(asc) or descending(desc)",
              "example": "asc"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Limit of results that should be returned",
              "format": "int32",
              "example": "5"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Number of items to be skipped",
              "format": "int32",
              "example": "0"
            }
          },
          {
            "name": "UnitNumber",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Unit number(00000 if not a unit)",
              "example": "00001"
            }
          },
          {
            "name": "PropertyKey",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Property key(SG Code)",
              "example": "T0JR00000000000000000"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Report name",
              "example": "Sample address"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedPropertyReportDtoPagedResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/PropertyReport/Create": {
      "post": {
        "tags": [
          "PropertyReport"
        ],
        "summary": "Create",
        "description": "Create report for property with given key. If Deeds.Owners are a Trust or Company use the Trust/Company Endpoint to retrieve Information ",
        "operationId": "Create",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyReportGetPropertyRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyReportGetPropertyRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyReportGetPropertyRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PropertyReportGetPropertyRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyReportDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/PropertyReport/Create\", Method.Post);\r\n            var body = new\r\n            {\r\n                unitNumber = \"00000\",\r\n                propertyKey = \"T0JR00000000000000000\",\r\n                includeOwnerCellNumbers = true,\r\n                consented = true,\r\n                purchaseValuation = true\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/PropertyReport/Create\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"unitNumber\\\":\\\"00000\\\",\\\"propertyKey\\\":\\\"T0JR00000000000000000\\\",\\\"includeOwnerCellNumbers\\\":\\\"true\\\",\\\"consented\\\":\\\"true\\\",\\\"purchaseValuation\\\":\\\"true\\\"}\""
          }
        ]
      }
    },
    "/api/services/app/Report/GetAll": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "GetAll",
        "description": "Get report history",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "SortingOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Creation Date Sorting ascending(asc) or descending(desc)",
              "example": "asc"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Limit of results that should be returned",
              "format": "int32",
              "example": "5"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Number of items to be skipped",
              "format": "int",
              "example": "0"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDtoPagedResultDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Report/GetAll\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"sortingOrder\", \"asc\");\r\n            request.AddParameter(\"maxResultCount\", \"5\");\r\n            request.AddParameter(\"skipCount\", \"0\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Report/GetAll?sortingOrder=asc&maxResultCount=5&skipCount=0\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Report/GetSales": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "GetSales",
        "description": "Get sales",
        "operationId": "GetSales",
        "parameters": [
          {
            "name": "Keys.AreaId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keys.QueryId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keys.Lat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keys.Lon",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keys.ReportId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keys.Market_area_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters.Sold_price_min",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filters.Sold_price_max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filters.Building_extent_min",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filters.Building_extent_max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filters.Erf_extent_min",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filters.Erf_extent_max",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filters.Sold_year_min",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters.Sold_year_max",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters.Full_title",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Filters.Farm",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Filters.Holding",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Filters.Sectional_title",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Filters.Sort_by",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filters.Sort_order",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyReportSalesDtoV2"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Report/GetSales\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"keys.areaId\", \"1\");\r\n                request.AddParameter(\"keys.lat\", \"-20.123\");\r\n                request.AddParameter(\"keys.lon\", \"20.123\");\r\n                request.AddParameter(\"keys.queryId\", \"\");\r\n                request.AddParameter(\"keys.reportId\", \"\");\r\n                request.AddParameter(\"filters.sold_price_min\", \"100000\");\r\n                request.AddParameter(\"filters.sold_price_max\", \"10000000\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Report/GetSales?keys.areaId=1&keys.lat=-20.123&keys.lon=20.123&keys.queryId=0a00aaa0-0a0a-0aa0-0aa0-aa000a0aaa00&keys.reportId=1&filters.sold_price_min=100000&filters.sold_price_max=1000000\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Report/GetSalesBuckets": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "GetSalesBuckets",
        "description": "Get sales buckets",
        "operationId": "GetSalesBuckets",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportBucketDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Report/GetSalesBuckets\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Report/GetSalesBuckets\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Search/Search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search",
        "description": "Search for property",
        "operationId": "Search",
        "parameters": [
          {
            "name": "Address",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Partial address",
              "example": "22 Test Street"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeocodeV3LocationDtoV2"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Search/Search\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"address\", \"22 Demo Street\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Search/Search?address=22%20Demo%20Street\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Search/GetAddressDetails": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "GetAddressDetails",
        "description": "Get address details",
        "operationId": "GetAddressDetails",
        "parameters": [
          {
            "name": "AddressId",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Address Id",
              "example": "2b51d9da-0630-4193-85f8-0f9149f79602"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapAddressDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/Search/AdvanceSearch": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "AdvanceSearch",
        "description": "Advanced search for property",
        "operationId": "AdvanceSearch",
        "parameters": [
          {
            "name": "OwnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Name of owner",
              "example": "James Test"
            }
          },
          {
            "name": "Town",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Town",
              "example": "Vereeniging"
            }
          },
          {
            "name": "ErfNumber",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Erf number",
              "example": "12"
            }
          },
          {
            "name": "OwnerId",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Id number of owner",
              "example": "9803230000000"
            }
          },
          {
            "name": "TitleDeedNumber",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Title Deed Number",
              "example": "T91543/2021"
            }
          },
          {
            "name": "UnitNumber",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "UnitNumber",
              "example": "00000"
            }
          },
          {
            "name": "SchemeName",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "SchemeName",
              "example": "ANNLIN 410"
            }
          },
          {
            "name": "PropertyKey",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "SGCode",
              "example": "C04600120000505100000"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeedsInfoResultDto"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Search/AdvanceSearch\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"town\", \"DemoTown\");\r\n            request.AddParameter(\"erfNumber\", \"1\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Search/AdvanceSearch?town=DemoTown&erfNumber=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Street/GetStreetInfo": {
      "get": {
        "tags": [
          "Street"
        ],
        "summary": "GetStreetInfo",
        "description": "Get street information",
        "operationId": "GetStreetInfo",
        "parameters": [
          {
            "name": "Identifier",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "GUID of street",
              "format": "uuid",
              "example": "57660939-f760-4784-a6f8-208a27020773"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreetDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\nRestRequest request = new(\"/api/services/app/Street/GetStreetInfo\", Method.Get);\r\n\r\n\r\nrequest.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\nrequest.AddHeader(\"clientIdentifier\", client_identifier);\r\nrequest.AddHeader(\"userEmail\", userEmail);\r\n\r\nrequest.AddParameter(\"identifier\", Guid.Parse(\"57660939-f760-4784-a6f8-208a27020773\"));\r\n\r\nvar response = client.Execute(request);\r\nif (response.IsSuccessful)\r\n    Console.WriteLine(response.Content);\r\nelse\r\n{\r\n    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n}\r\nConsole.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Street/GetStreetInfo?identifier=57660939-f760-4784-a6f8-208a27020773\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H  \"Authorization: Bearer xxxx\"\r\n"
          }
        ]
      }
    },
    "/api/services/app/Street/Get": {
      "get": {
        "tags": [
          "Street"
        ],
        "summary": "Get",
        "description": "Get saved street information",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id of street",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreetUpdateDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\nRestRequest request = new(\"/api/services/app/Street/Get\", Method.Get);\r\n\r\n request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"id\", \"1\");\r\n\r\nvar response = client.Execute(request);\r\nif (response.IsSuccessful)\r\n    Console.WriteLine(response.Content);\r\nelse\r\n{\r\n    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n}\r\nConsole.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X Get \"http://host/api/services/app/Street/Get?id=1\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H  \"Authorization: Bearer xxxx\"\r\n"
          }
        ]
      }
    },
    "/api/services/app/Street/GetAll": {
      "get": {
        "tags": [
          "Street"
        ],
        "summary": "GetAll",
        "description": "Get saved streets for user",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "SortingOrder",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Creation Date Sorting ascending(asc) or descending(desc)",
              "example": "asc"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Limit of results that should be returned",
              "format": "int32",
              "example": "5"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Number of items to be skipped",
              "format": "int32",
              "example": "0"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreetUpdateDtoPagedResultDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\nRestRequest request = new(\"/api/services/app/Street/GetAll\", Method.Get);\r\n\r\nrequest.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\nrequest.AddHeader(\"clientIdentifier\", client_identifier);\r\nrequest.AddHeader(\"userEmail\", userEmail);\r\n\r\nrequest.AddParameter(\"sortingOrder\", \"asc\");\r\nrequest.AddParameter(\"maxResultCount\", \"5\");\r\nrequest.AddParameter(\"skipCount\", \"0\");\r\n\r\nvar response = client.Execute(request);\r\nif (response.IsSuccessful)\r\n    Console.WriteLine(response.Content);\r\nelse\r\n{\r\n    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n}\r\nConsole.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Street/GetAll?sortingOrder=asc&maxResultCount=5&skipCount=0\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H  \"Authorization: Bearer xxxx\"\r\n"
          }
        ]
      }
    },
    "/api/services/app/Street/Delete": {
      "delete": {
        "tags": [
          "Street"
        ],
        "summary": "Delete",
        "description": "Delete street",
        "operationId": "Delete",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id of street",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\nRestRequest request = new(\"/api/services/app/Street/Delete\", Method.Delete);\r\n\r\nrequest.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\nrequest.AddHeader(\"clientIdentifier\", client_identifier);\r\nrequest.AddHeader(\"userEmail\", userEmail);\r\n\r\nrequest.AddParameter(\"id\", \"1\");\r\n\r\nvar response = client.Execute(request);\r\nif (response.IsSuccessful)\r\n    Console.WriteLine(response.Content);\r\nelse\r\n{\r\n    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n}\r\nConsole.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X DELETE \"http://host/api/services/app/Street/Delete?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H  \"Authorization: Bearer xxxx\"\r\n"
          }
        ]
      }
    },
    "/api/services/app/Street/Create": {
      "post": {
        "tags": [
          "Street"
        ],
        "summary": "Create",
        "description": "Create map street",
        "operationId": "Create",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetDtoV2"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetDtoV2"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetDtoV2"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetDtoV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreetUpdateDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\nRestRequest request = new(\"/api/services/app/Street/Create\", Method.Post);\r\n\r\nrequest.AddJsonBody(new \r\n{\r\n    name = \"Demo name\",\r\n    subplace_streets = new List<Object>\r\n    {\r\n        new \r\n        {\r\n            street_id = \"8b10fe18-cf5a-11eb-94bc-7c8bca03cc96\",\r\n            subplace = \"Demo name\",\r\n            subplace_id = \"599054050-0L.HVHV\",\r\n            subplace_name = \"demo name\",\r\n            subplace_feature = new\r\n            {\r\n                type = \"Polygon\",\r\n                geometry = new \r\n                {\r\n                    coordinates = \"[[[30.941541, -29.900693], [30.932214, -29.901111], [30.930379, -29.900839], [30.929196, -29.900195]]]\",\r\n                    type = \"Polygon\"\r\n                }\r\n            },\r\n            properties = new List<Object>\r\n            {\r\n                new\r\n                {\r\n                    property_key = \"DemoKey\",\r\n                    unit_number = \"00000\",\r\n                    street_number = \"1\",\r\n                    position = new\r\n                    {\r\n                        lat = 28.123f,\r\n                        lon = 20.123f\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n});\r\n\r\nrequest.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\nrequest.AddHeader(\"clientIdentifier\", client_identifier);\r\nrequest.AddHeader(\"userEmail\", userEmail);\r\n\r\nvar response = client.Execute(request);\r\nif (response.IsSuccessful)\r\n    Console.WriteLine(response.Content);\r\nelse\r\n{\r\n    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n}\r\nConsole.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/Street/Create\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H  \"Authorization: Bearer xxxx\" -d \"{\\\"name\\\":\\\"New Name\\\",\\\"subplace_streets\\\" : [{\\\"street_id\\\" : \\\"8b10fe18-cf5a-11eb-94bc-7c8bca03cc96\\\",\\\"subplace\\\" : \\\"Subplace name\\\",\\\"subplace_id\\\" : \\\"599054050-0L.HVHV\\\",\\\"subplace_feature\\\" : {\\\"type\\\" : \\\"Polygon\\\",\\\"geometry\\\" : {\\\"type\\\" : \\\"Polygon\\\",\\\"coordinates\\\" : \\\"[[[30.941541, -29.900693], [30.932214, -29.901111], [30.930379, -29.900839], [30.929196, -29.900195]]]\\\"}},\\\"properties\\\" : [{\\\"property_key\\\" : \\\"DemoKey\\\",\\\"unit_number\\\" : \\\"00000\\\",\\\"street_number\\\" : \\\"1\\\",\\\"position\\\" : {\\\"lat\\\" : \\\"28.1234\\\",\\\"lon\\\" : \\\"20.1234\\\"}}]}]}\"\r\n"
          }
        ]
      }
    },
    "/api/services/app/Street/Update": {
      "put": {
        "tags": [
          "Street"
        ],
        "summary": "Update",
        "description": "Update map street",
        "operationId": "Update",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreetUpdateDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\nRestRequest request = new(\"/api/services/app/Street/Update\", Method.Put);\r\n\r\nrequest.AddJsonBody(new \r\n{\r\n    id = 1,\r\n    name = \"Demo name\",\r\n    subplace_streets = new List<Object>\r\n    {\r\n        new \r\n        {\r\n            street_id = \"8b10fe18-cf5a-11eb-94bc-7c8bca03cc96\",\r\n            subplace = \"Demo name\",\r\n            subplace_id = \"599054050-0L.HVHV\",\r\n            subplace_feature = new\r\n            {\r\n                type = \"Polygon\",\r\n                geometry = new \r\n                {\r\n                    coordinates = \"[[[30.941541, -29.900693], [30.932214, -29.901111], [30.930379, -29.900839], [30.929196, -29.900195]]]\",\r\n                    type = \"Polygon\"\r\n                }\r\n            },\r\n            properties = new List<Object>\r\n            {\r\n                new\r\n                {\r\n                    property_key = \"DemoKey\",\r\n                    unit_number = \"00000\",\r\n                    street_number = \"1\",\r\n                    position = new\r\n                    {\r\n                        lat = 28.123f,\r\n                        lon = 20.123f\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n});\r\n\r\nrequest.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\nrequest.AddHeader(\"clientIdentifier\", client_identifier);\r\nrequest.AddHeader(\"userEmail\", userEmail);\r\nvar response = client.Execute(request);\r\nif (response.IsSuccessful)\r\n    Console.WriteLine(response.Content);\r\nelse\r\n{\r\n    Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n}\r\nConsole.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X PUT \"http://host/api/services/app/Street/Update\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H  \"Authorization: Bearer xxxx\" -d \"{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"New Name\\\",\\\"subplace_streets\\\" : [{\\\"street_id\\\" : \\\"8b10fe18-cf5a-11eb-94bc-7c8bca03cc96\\\",\\\"subplace\\\" : \\\"Subplace name\\\",\\\"subplace_id\\\" : \\\"599054050-0L.HVHV\\\",\\\"subplace_feature\\\" : {\\\"type\\\" : \\\"Polygon\\\",\\\"geometry\\\" : {\\\"type\\\" : \\\"Polygon\\\",\\\"coordinates\\\" : \\\"[[[30.941541, -29.900693], [30.932214, -29.901111], [30.930379, -29.900839], [30.929196, -29.900195]]]\\\"}},\\\"properties\\\" : [{\\\"property_key\\\" : \\\"DemoKey\\\",\\\"unit_number\\\" : \\\"00000\\\",\\\"street_number\\\" : \\\"1\\\",\\\"position\\\" : {\\\"lat\\\" : \\\"28.1234\\\",\\\"lon\\\" : \\\"20.1234\\\"}}]}]}\"\r\n"
          }
        ]
      }
    },
    "/api/services/app/Street/RequestContactDetails": {
      "post": {
        "tags": [
          "Street"
        ],
        "summary": "RequestContactDetails",
        "description": "Request Contacts",
        "operationId": "RequestContactDetails",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetContactDetailRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetContactDetailRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetContactDetailRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetContactDetailRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreetContactDetailResponseModel"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Report/RequestPropertiesContactDetails\", Method.Post);\r\n\r\n            var body = new\r\n                {\r\n                    SaleAll = false,\r\n                    Sale0To1Year = false,\r\n                    Sale1To3Years = false,\r\n                    Sale3To5Years = false,\r\n                    Sale5to8Years = false,\r\n                    Sale8PlusYears = false,\r\n                    AgeAll = false,\r\n                    Age18To35Years = false,\r\n                    Age36To49Years = false,\r\n                    Age50To65Years = false,\r\n                    Age65PlusYears = false,\r\n                    FullTitle = false,\r\n                    SectionalTitle = false,\r\n                    FullNameAndId = false,\r\n                    \r\n                    ContactNumber = true,\r\n                    \r\n                    Email = false,\r\n\r\n                    QueryId = \"<SOME GUID>\",\r\n                    ReportName = \"Report Name\",\r\n                    Source = \"Source\",\r\n                    TenantId = 0,\r\n\r\n                    OnBehalfOfEmail = \"\",\r\n                    MaxNumbers = 100\r\n                };\r\n\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/Report/RequestPropertiesContactDetails\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/StreetReport/Get": {
      "get": {
        "tags": [
          "StreetReport"
        ],
        "summary": "Get",
        "description": "Get street report",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id of street report",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreetReportSavedDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/StreetReport/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"id\", \"1\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/StreetReport/Get?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/StreetReport/RequestReport": {
      "post": {
        "tags": [
          "StreetReport"
        ],
        "summary": "RequestReport",
        "description": "Request Report",
        "operationId": "RequestReport",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetReportStreetRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetReportStreetRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetReportStreetRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetReportStreetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportRequestResponseDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/StreetReport/RequestReport\", Method.Post);\r\n            var body = new\r\n            {\r\n                id = 1\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/StreetReport/RequestReport\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"id\\\":\\\"1\\\"}\""
          }
        ]
      }
    },
    "/api/services/app/StreetReport/GetReport": {
      "get": {
        "tags": [
          "StreetReport"
        ],
        "summary": "GetReport",
        "description": "Get Report for Version by VersionId",
        "operationId": "GetReport",
        "parameters": [
          {
            "name": "VersionId",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "VersionId of report",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/StreetReport/GetReport\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"versionId\", \"1\");\r\n\r\n            var response = client.DownloadData(request);\r\n\r\n                if (response != null)\r\n                {\r\n                    File.WriteAllBytes(\"download.pdf\", response);\r\n\t\t\t\t    Console.WriteLine(\"File downloaded\");\r\n                }\r\n                else\r\n                {\r\n                    Console.WriteLine($\"Error\");\r\n                }\r\n                Console.WriteLine(DateTime.Now);\r\n                Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/StreetReport/GetReport?versionId=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/StreetReport/Create": {
      "post": {
        "tags": [
          "StreetReport"
        ],
        "summary": "Create",
        "description": "Generate report for street with given id",
        "operationId": "Create",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetReportStreetRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetReportStreetRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StreetReportStreetRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StreetReportStreetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreetReportDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n            RestRequest request = new(\"/api/services/app/StreetReport/Create\", Method.Post);\r\n            var body = new\r\n            {\r\n                id = \"1\"\r\n            };\r\n            request.AddJsonBody(body);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X POST \"http://host/api/services/app/StreetReport/Create\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\" -d \"{\\\"id\\\":\\\"1\\\"}\""
          }
        ]
      }
    },
    "/api/services/app/Subplace/Get": {
      "get": {
        "tags": [
          "Subplace"
        ],
        "summary": "Get",
        "description": "Get Subplace",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "SubplaceId",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Subplace Id",
              "example": "874016001-CH.6BGQ"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubplaceDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/Subplace/GetAll": {
      "get": {
        "tags": [
          "Subplace"
        ],
        "summary": "GetAll",
        "description": "Report on Subplaces With Paging",
        "operationId": "GetAll",
        "parameters": [
          {
            "name": "MaxResultCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Limit of results that should be returned",
              "format": "int",
              "example": "5"
            }
          },
          {
            "name": "SkipCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Number of items to be skipped",
              "format": "int",
              "example": "0"
            }
          },
          {
            "name": "Subplace",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Subplace Name",
              "example": "Equestria"
            }
          },
          {
            "name": "Province",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Subplace Name",
              "example": "Gauteng"
            }
          },
          {
            "name": "Town",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Town Name",
              "example": "Pretoria"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubplaceListDtoPagedResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/SubplaceReport/Get": {
      "get": {
        "tags": [
          "SubplaceReport"
        ],
        "summary": "Get",
        "description": "Report on Subplaces",
        "operationId": "Get",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "description": "Id",
              "format": "int64",
              "example": "1"
            }
          },
          {
            "name": "SubplaceId",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Subplace Id",
              "example": "874016001-CH.6BGQ"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuburbReportDtoV2"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/AreaReport/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            request.AddParameter(\"id\", \"1\");\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/AreaReport/Get?id=1\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Trust/TrustSearch": {
      "get": {
        "tags": [
          "Trust"
        ],
        "summary": "TrustSearch",
        "description": "Search Trust with criteria",
        "operationId": "TrustSearch",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TrustSearchRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrustSearchRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TrustSearchRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TrustSearchRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrustSearchWithFiltersDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Trust/GetTrustDetails": {
      "get": {
        "tags": [
          "Trust"
        ],
        "summary": "GeTrusteeContactDetails",
        "description": "Get a trustee contact details",
        "operationId": "GeTrusteeContactDetails",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TrustDetailsRequestDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrustDetailsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TrustDetailsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TrustDetailsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumerInfoTrustDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Trust/GeTrusteeContactDetails": {
      "get": {
        "tags": [
          "Trust"
        ],
        "summary": "GeTrusteeContactDetails",
        "description": "Get a trustee contact details",
        "operationId": "GeTrusteeContactDetails",
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TrusteeContactDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrusteeContactDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TrusteeContactDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TrusteeContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrusteeContactResponseDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Trust/GetTrustReport": {
      "get": {
        "tags": [
          "Trust"
        ],
        "summary": "GetReport",
        "description": "Get a previous report",
        "operationId": "GetReport",
        "parameters": [
          {
            "name": "reportId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectorContactResponseListDto"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "C# ",
            "source": "RestClient client = new(serverUrl);\r\n\r\n            RestRequest request = new(\"/api/services/app/Consent/Get\", Method.Get);\r\n\r\n            request.AddHeader(\"Authorization\", $\"Bearer {token}\");\r\n            request.AddHeader(\"clientIdentifier\", client_identifier);\r\n            request.AddHeader(\"userEmail\", userEmail);\r\n\r\n            var response = client.Execute(request);\r\n            if (response.IsSuccessful)\r\n                Console.WriteLine(response?.Content);\r\n            else\r\n            {\r\n                Console.WriteLine($\"{response.Content} ({response.StatusCode})\");\r\n            }\r\n            Console.ReadLine();"
          },
          {
            "lang": "Curl ",
            "source": "curl -X GET \"http://host/api/services/app/Consent/Get\" -H \"clientIdentifier: identifierHere\" -H \"userEmail: example@gmail.com\" -H  \"accept: */*\" -H  \"Content-Type: application/json-patch+json\" -H \"Authorization: Bearer xxxxx\""
          }
        ]
      }
    },
    "/api/services/app/Webhook/GetWebhooks": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/Webhook/SubscribeTo": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInfo"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/Webhook/GetSubscriptions": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/services/app/Webhook/RemoveSubscriptions": {
      "delete": {
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userEmail",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientIdentifier",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressDto": {
        "type": "object",
        "properties": {
          "unitNumber": {
            "maxLength": 5,
            "type": "string",
            "description": "Unit number of property",
            "nullable": true,
            "example": "00000"
          },
          "street": {
            "maxLength": 100,
            "type": "string",
            "description": "Street name",
            "nullable": true,
            "example": "Sample street"
          },
          "streetNumber": {
            "maxLength": 10,
            "type": "string",
            "description": "Street number",
            "nullable": true,
            "example": "1A"
          },
          "marketArea": {
            "maxLength": 100,
            "type": "string",
            "description": "Market area name",
            "nullable": true,
            "example": "Eldoraigne"
          },
          "marketAreaId": {
            "maxLength": 100,
            "type": "string",
            "description": "Market area id",
            "nullable": true,
            "example": "2597B967-2F6F-4236-8A6D-5D80C86C4C79"
          },
          "subplace": {
            "maxLength": 50,
            "type": "string",
            "description": "Subplace",
            "nullable": true,
            "example": "Eldoraigne Ext 0"
          },
          "cityTown": {
            "maxLength": 50,
            "type": "string",
            "description": "City or town name",
            "nullable": true,
            "example": "Centurion"
          },
          "province": {
            "maxLength": 50,
            "type": "string",
            "description": "Province name",
            "nullable": true,
            "example": "Gauteng"
          },
          "postalCode": {
            "maxLength": 5,
            "type": "string",
            "description": "Postal code",
            "nullable": true,
            "example": "0000"
          },
          "complex": {
            "maxLength": 80,
            "type": "string",
            "description": "Complex name",
            "nullable": true,
            "example": "Complex A"
          },
          "majorComplex": {
            "maxLength": 80,
            "type": "string",
            "description": "Major complex name",
            "nullable": true,
            "example": "Major complex"
          },
          "marketTown": {
            "maxLength": 100,
            "type": "string",
            "description": "Market town name",
            "nullable": true,
            "example": "Centurion"
          },
          "marketTownId": {
            "maxLength": 100,
            "type": "string",
            "description": "Market town id",
            "nullable": true,
            "example": "C64F3680-B99B-4DC2-AB86-4314F207A54A"
          },
          "marketAreaExtensionId": {
            "maxLength": 100,
            "type": "string",
            "description": "Market area extension id",
            "nullable": true,
            "example": "2597B967-2F6F-4236-8A6D-5D80C86C4C79"
          },
          "marketAreaExtension": {
            "maxLength": 100,
            "type": "string",
            "description": "Market area extension",
            "nullable": true,
            "example": "Eldoraigne Ext 18"
          }
        },
        "additionalProperties": false
      },
      "AgentDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Agent name",
            "nullable": true,
            "example": "Name"
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Agent surname",
            "nullable": true,
            "example": "Surname"
          },
          "emailAddress": {
            "maxLength": 50,
            "type": "string",
            "description": "Agent e-mail",
            "nullable": true,
            "example": "agent@agency.co.za"
          },
          "realEstate": {
            "$ref": "#/components/schemas/RealestateDto"
          }
        },
        "additionalProperties": false
      },
      "ApplicationStatusEnum": {
        "title": "Application Status",
        "enum": [
          null,
          "Submitted",
          "AttorneyInstructed",
          "Registered"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided status is not listed above"
      },
      "AreaContactDetailRequestModel": {
        "type": "object",
        "properties": {
          "saleAll": {
            "type": "boolean"
          },
          "sale0To1Year": {
            "type": "boolean"
          },
          "sale1To3Years": {
            "type": "boolean"
          },
          "sale3To5Years": {
            "type": "boolean"
          },
          "sale5to8Years": {
            "type": "boolean"
          },
          "sale8PlusYears": {
            "type": "boolean"
          },
          "ageAll": {
            "type": "boolean"
          },
          "age18To35Years": {
            "type": "boolean"
          },
          "age36To49Years": {
            "type": "boolean"
          },
          "age50To65Years": {
            "type": "boolean"
          },
          "age65PlusYears": {
            "type": "boolean"
          },
          "fullTitle": {
            "type": "boolean"
          },
          "sectionalTitle": {
            "type": "boolean"
          },
          "fullNameAndId": {
            "type": "boolean"
          },
          "contactNumber": {
            "type": "boolean"
          },
          "contactEmail": {
            "type": "boolean"
          },
          "reportName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "onBehalfOfEmail": {
            "type": "string",
            "nullable": true
          },
          "maxNumbers": {
            "type": "integer",
            "format": "int32"
          },
          "kmlXml": {
            "type": "string",
            "nullable": true
          },
          "consented": {
            "type": "boolean"
          },
          "estimation": {
            "type": "boolean",
            "description": "Only estimate the cost for the request"
          }
        },
        "additionalProperties": false
      },
      "AreaContactDetailResponseModel": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "integer",
            "format": "int32"
          },
          "owners": {
            "type": "integer",
            "format": "int32"
          },
          "requiredCredits": {
            "type": "number",
            "format": "double"
          },
          "availableCredits": {
            "type": "number",
            "format": "double"
          },
          "areaID": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "queryID": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "messageCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Name of area",
            "nullable": true,
            "example": "My area 1"
          },
          "geometryJson": {
            "type": "string",
            "description": "Geometry data in JSON format",
            "nullable": true,
            "example": "[{\"id\":\"1\",\"type\":\"neighbourhood\",\"name\":\"geometryItem1\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000]]]}}]"
          }
        },
        "additionalProperties": false
      },
      "AreaDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of area",
            "format": "long",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Name of area",
            "nullable": true,
            "example": "My Area"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaItemDto"
            },
            "nullable": true
          },
          "rsAreaId": {
            "type": "string",
            "description": "Riskscape area identifier",
            "format": "uuid",
            "example": "CFB00DD0-000C-0000-A0DE-EF0DEDDAE000"
          }
        },
        "additionalProperties": false
      },
      "AreaDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AreaGeometryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Geometry type",
            "nullable": true,
            "example": "Polygon"
          },
          "coordinates": {
            "description": "Coordinates of geometry",
            "nullable": true,
            "example": "[[[10.0000, -10.0000],[10.0000, -10.0000],[10.0000, -10.0000]]]"
          }
        },
        "additionalProperties": false
      },
      "AreaItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of area item",
            "nullable": true,
            "example": "1"
          },
          "type": {
            "type": "string",
            "description": "Item type",
            "nullable": true,
            "example": "neighbourhood"
          },
          "name": {
            "type": "string",
            "description": "Item name",
            "nullable": true,
            "example": "geometryItem1"
          },
          "geometry": {
            "$ref": "#/components/schemas/AreaGeometryDto"
          }
        },
        "additionalProperties": false
      },
      "AreaReportAmenityDtoV2": {
        "type": "object",
        "properties": {
          "shopping_centres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportShopping_CentreDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportAreaRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of area",
            "format": "int64",
            "example": "1"
          }
        },
        "additionalProperties": false
      },
      "AreaReportBond_Holder_GroupDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportBuilding_SizesDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "median": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportDataDtoV2": {
        "type": "object",
        "properties": {
          "query_id": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "$ref": "#/components/schemas/AreaReportPropertiesDtoV2"
          },
          "amenities": {
            "$ref": "#/components/schemas/AreaReportAmenityDtoV2"
          },
          "schemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportSchemeDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportDistributionDtoV2": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "$ref": "#/components/schemas/AreaReportDataDtoV2"
          },
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportSalesDtoV2"
            },
            "nullable": true
          },
          "buckets": {
            "$ref": "#/components/schemas/ReportBucketDtoV2"
          },
          "area": {
            "$ref": "#/components/schemas/AreaDto"
          }
        },
        "additionalProperties": false
      },
      "AreaReportFull_TitleDtoV2": {
        "type": "object",
        "properties": {
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "building_sizes": {
            "$ref": "#/components/schemas/AreaReportBuilding_SizesDtoV2"
          },
          "bond_holder_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportBond_Holder_GroupDtoV2"
            },
            "nullable": true
          },
          "house_price_classifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportHouse_Price_ClassificationDtoV2"
            },
            "nullable": true
          },
          "owner_ages": {
            "$ref": "#/components/schemas/AreaReportOwner_AgeDtoV2"
          },
          "owner_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportOwner_TypeDtoV2"
            },
            "nullable": true
          },
          "recent_buyer_ages": {
            "$ref": "#/components/schemas/AreaReportRecent_Buyer_AgeDtoV2"
          },
          "recent_seller_ages": {
            "$ref": "#/components/schemas/AreaReportRecent_Seller_AgeDtoV2"
          },
          "registration_ages": {
            "$ref": "#/components/schemas/AreaReportRegistration_AgeDtoV2"
          },
          "stand_sizes": {
            "$ref": "#/components/schemas/AreaReportStand_SizeDtoV2"
          },
          "valuations": {
            "$ref": "#/components/schemas/AreaReportValuationDtoV2"
          }
        },
        "additionalProperties": false
      },
      "AreaReportHouse_Price_ClassificationDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportOwner_AgeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportOwner_TypeDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportPositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportPropertiesDtoV2": {
        "type": "object",
        "properties": {
          "full_title": {
            "$ref": "#/components/schemas/AreaReportFull_TitleDtoV2"
          },
          "sectional_title": {
            "$ref": "#/components/schemas/AreaReportSectional_TitleDtoV2"
          }
        },
        "additionalProperties": false
      },
      "AreaReportRecent_Buyer_AgeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportRecent_Seller_AgeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportRegistration_AgeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportSalesDtoV2": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "property_type": {
            "type": "string",
            "nullable": true
          },
          "property_type_name": {
            "type": "string",
            "nullable": true
          },
          "erf_number": {
            "type": "string",
            "nullable": true
          },
          "stand_size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "building_size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sell_date": {
            "type": "string",
            "nullable": true
          },
          "sell_price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "sell_price_description": {
            "type": "string",
            "nullable": true
          },
          "registration_date": {
            "type": "string",
            "nullable": true
          },
          "full_address": {
            "type": "string",
            "nullable": true
          },
          "short_address": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood_id": {
            "type": "string",
            "nullable": true
          },
          "scheme_id": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/MapAreaReportSalesPositionDtoV2"
          },
          "distance_to_source": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportSavedDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "$ref": "#/components/schemas/AreaReportDataDtoV2"
          },
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportSalesDtoV2"
            },
            "nullable": true
          },
          "buckets": {
            "$ref": "#/components/schemas/ReportBucketDtoV2"
          },
          "area": {
            "$ref": "#/components/schemas/AreaDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AreaReportSchemeDtoV2": {
        "type": "object",
        "properties": {
          "scheme_id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "extent": {
            "type": "integer",
            "format": "int64"
          },
          "full_title_units": {
            "type": "integer",
            "format": "int32"
          },
          "sectional_title_units": {
            "type": "integer",
            "format": "int32"
          },
          "has_sectional_units": {
            "type": "boolean"
          },
          "is_lowest_with_sectional_units": {
            "type": "boolean"
          },
          "position": {
            "$ref": "#/components/schemas/AreaReportPositionDtoV2"
          }
        },
        "additionalProperties": false
      },
      "AreaReportSectional_TitleDtoV2": {
        "type": "object",
        "properties": {
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "building_sizes": {
            "$ref": "#/components/schemas/AreaReportBuilding_SizesDtoV2"
          },
          "bond_holder_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportBond_Holder_GroupDtoV2"
            },
            "nullable": true
          },
          "house_price_classifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportHouse_Price_ClassificationDtoV2"
            },
            "nullable": true
          },
          "owner_ages": {
            "$ref": "#/components/schemas/AreaReportOwner_AgeDtoV2"
          },
          "owner_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportOwner_TypeDtoV2"
            },
            "nullable": true
          },
          "recent_buyer_ages": {
            "$ref": "#/components/schemas/AreaReportRecent_Buyer_AgeDtoV2"
          },
          "recent_seller_ages": {
            "$ref": "#/components/schemas/AreaReportRecent_Seller_AgeDtoV2"
          },
          "registration_ages": {
            "$ref": "#/components/schemas/AreaReportRegistration_AgeDtoV2"
          },
          "valuations": {
            "$ref": "#/components/schemas/AreaReportValuationDtoV2"
          }
        },
        "additionalProperties": false
      },
      "AreaReportShopping_CentreDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/AreaReportPositionDtoV2"
          }
        },
        "additionalProperties": false
      },
      "AreaReportStand_SizeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "median": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaReportValuationDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "median": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AreaUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of area",
            "format": "long",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Name of area",
            "nullable": true,
            "example": "MyArea"
          },
          "geometryJson": {
            "type": "string",
            "description": "Geometry data in JSON format",
            "nullable": true,
            "example": "[{\"id\":\"1\",\"type\":\"neighbourhood\",\"name\":\"geometryItem1\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000],[10.000000,-10.000000]]]}}]"
          },
          "rsAreaId": {
            "type": "string",
            "description": "Riskscape area identifier",
            "format": "uuid",
            "example": "CFB00DD0-000C-0000-A0DE-EF0DEDDAE000"
          }
        },
        "additionalProperties": false
      },
      "BondDto": {
        "type": "object",
        "properties": {
          "bank": {
            "$ref": "#/components/schemas/OfferBankEnum"
          },
          "titleDeedNumber": {
            "type": "string",
            "description": "Title deed number",
            "nullable": true,
            "example": "000000000"
          },
          "registrationDate": {
            "type": "string",
            "description": "Registration date (YYYY/MM/DD)",
            "format": "date",
            "nullable": true,
            "example": "2000/01/01"
          },
          "loanAmount": {
            "type": "number",
            "description": "Loan amount",
            "format": "float",
            "nullable": true,
            "example": "2000000.00"
          }
        },
        "additionalProperties": false
      },
      "BuildingCompletionStatusEnum": {
        "enum": [
          "Completed",
          "CompletedPrimary",
          "OffPlan",
          "OffPlanPrimary"
        ],
        "type": "string",
        "format": "int32"
      },
      "BuildingFacingEnum": {
        "title": "Building Facing",
        "enum": [
          null,
          "North",
          "South",
          "East",
          "West",
          "StreetFront",
          "Waterview",
          "GreenbeltView"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided facing is not listed above"
      },
      "BuildingLookupAttributesDtoV2": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "property_has_sectional_units": {
            "type": "boolean"
          },
          "address_id": {
            "type": "string",
            "nullable": true
          },
          "scheme_id": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood_id": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BuildingLookupDtoV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "$ref": "#/components/schemas/BuildingLookupAttributesDtoV2"
          }
        },
        "additionalProperties": false
      },
      "BuildingStyleEnum": {
        "title": "Building Style",
        "enum": [
          null,
          "Conventional",
          "Modern",
          "Contemporary",
          "CapeDutch",
          "Cottage",
          "Victorian",
          "Spanish",
          "AFrame",
          "Mediterranean",
          "ArchitectDesign",
          "DoubleStorey",
          "Duplex",
          "Simplex",
          "SemiDetachedUnit",
          "Cluster",
          "Maisonette",
          "Tuscany",
          "Flat",
          "Bungalow",
          "SmallHolding",
          "ClusterHome",
          "Duet",
          "Freestanding",
          "Multistory",
          "Villa",
          "SingleStorey",
          "CountryStyle"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided style is not listed above"
      },
      "BusinessInterestDto": {
        "type": "object",
        "properties": {
          "companyCountry": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "companyNoxId": {
            "type": "string",
            "nullable": true
          },
          "companyRegistrationNumber": {
            "type": "string",
            "nullable": true
          },
          "directorshipNoxId": {
            "type": "string",
            "nullable": true
          },
          "principalStatus": {
            "type": "string",
            "nullable": true
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommercialAddressDto": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "suburb": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommercialInfoCompanyDto": {
        "type": "object",
        "properties": {
          "commercialInfo": {
            "$ref": "#/components/schemas/CommercialInfoDto"
          }
        },
        "additionalProperties": false
      },
      "CommercialInfoDto": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "integer",
            "format": "int64"
          },
          "responseCompanyInformation": {
            "$ref": "#/components/schemas/ResponseCompanyInformationDto"
          }
        },
        "additionalProperties": false
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "companyStatus": {
            "type": "string",
            "nullable": true
          },
          "companyType": {
            "type": "string",
            "nullable": true
          },
          "division": {
            "type": "string",
            "nullable": true
          },
          "entityClass": {
            "type": "string",
            "nullable": true
          },
          "entityCountry": {
            "type": "string",
            "nullable": true
          },
          "entityCountryCode": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "string",
            "nullable": true
          },
          "entityName": {
            "type": "string",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "nullable": true
          },
          "latestVatNumber": {
            "type": "string",
            "nullable": true
          },
          "registeredAddress": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "tradingAs": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyInformationDependecyDto": {
        "required": [
          "entityId"
        ],
        "type": "object",
        "properties": {
          "entityId": {
            "minLength": 1,
            "type": "string"
          },
          "vatnr": {
            "type": "string",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyScoreModuleDto": {
        "type": "object",
        "properties": {
          "expertScore": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quickScore": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanySearchWithFiltersResultsDto": {
        "type": "object",
        "properties": {
          "pageDetailsDto": {
            "$ref": "#/components/schemas/PageDetailsDto"
          },
          "companyDto": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConsentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Consent content in html",
            "nullable": true,
            "example": "<html>The content of consent</html>"
          },
          "id": {
            "type": "integer",
            "description": "Id of consent version",
            "format": "int",
            "example": "1"
          }
        },
        "additionalProperties": false
      },
      "ConsentRemovalRequest": {
        "type": "object",
        "properties": {
          "idNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Identifiers of owners to remove consent for (Can be id number, company registration numbers etc.)",
            "nullable": true,
            "example": "2011/000123/07"
          }
        },
        "additionalProperties": false
      },
      "ConstructionTypeEnum": {
        "title": "Construction Type",
        "enum": [
          null,
          "Standard",
          "NonStandard"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided type is not listed above"
      },
      "ConsumerInfoTrustDto": {
        "type": "object",
        "properties": {
          "response_trust_search": {
            "$ref": "#/components/schemas/ResponseTrustSearchDto"
          }
        },
        "additionalProperties": false
      },
      "ContactDetailsDto": {
        "type": "object",
        "properties": {
          "cellNumber": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "nullable": true
          },
          "faxNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactDetailsResponseDto": {
        "type": "object",
        "properties": {
          "confidence": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "idNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactEmailsResponseDto": {
        "type": "object",
        "properties": {
          "confidence": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "idNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateListingDto": {
        "required": [
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "maxLength": 24,
            "type": "string",
            "description": "Property id (SG Code)",
            "nullable": true,
            "example": "L1"
          },
          "sourceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique key from the source",
            "example": "FEE12345"
          },
          "details": {
            "$ref": "#/components/schemas/ListingDetailsDto"
          },
          "property": {
            "$ref": "#/components/schemas/PropertyDto"
          },
          "agent": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentDto"
            },
            "nullable": true
          },
          "seller": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          },
          "tenant": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateOtpDto": {
        "required": [
          "offer",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique key from the source",
            "example": "1"
          },
          "propertyId": {
            "maxLength": 24,
            "type": "string",
            "description": "Property id (SG Code)",
            "nullable": true,
            "example": "L1"
          },
          "agent": {
            "$ref": "#/components/schemas/AgentDto"
          },
          "property": {
            "$ref": "#/components/schemas/PropertyDto"
          },
          "offer": {
            "$ref": "#/components/schemas/OfferDto"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          },
          "applicationStatus": {
            "$ref": "#/components/schemas/ApplicationStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "CreateStdListingDto": {
        "required": [
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "maxLength": 24,
            "type": "string",
            "description": "Property id (SG Code)",
            "nullable": true,
            "example": "L1"
          },
          "sourceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique key from the source",
            "example": "FEE12345"
          },
          "on_show_events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "agent": {
            "type": "string",
            "nullable": true
          },
          "agent_2": {
            "type": "string",
            "nullable": true
          },
          "agent_3": {
            "type": "string",
            "nullable": true
          },
          "agent_4": {
            "type": "string",
            "nullable": true
          },
          "poa": {
            "type": "boolean",
            "nullable": true
          },
          "owner_viewing_arrangements": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "street_number": {
            "type": "string",
            "nullable": true
          },
          "street_name": {
            "type": "string",
            "nullable": true
          },
          "mapping_option": {
            "type": "string",
            "nullable": true
          },
          "complex_name": {
            "type": "string",
            "nullable": true
          },
          "marketing_heading": {
            "type": "string",
            "nullable": true
          },
          "listing_images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "floor_plans": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "on_show": {
            "type": "boolean",
            "nullable": true
          },
          "on_show_directions": {
            "type": "string",
            "nullable": true
          },
          "on_show_date": {
            "type": "string",
            "nullable": true
          },
          "on_show_every_saturday": {
            "type": "boolean",
            "nullable": true
          },
          "on_show_every_sunday": {
            "type": "boolean",
            "nullable": true
          },
          "on_show_start_time": {
            "type": "string",
            "nullable": true
          },
          "on_show_end_time": {
            "type": "string",
            "nullable": true
          },
          "video_streaming_platform": {
            "$ref": "#/components/schemas/VideoStreamingPlatformEnum"
          },
          "video_id": {
            "type": "string",
            "nullable": true
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tenant": {
            "type": "string",
            "nullable": true
          },
          "tenant_lease_ends": {
            "type": "string",
            "nullable": true
          },
          "tenant_notice_period": {
            "type": "string",
            "nullable": true
          },
          "tenant_rental": {
            "type": "string",
            "nullable": true
          },
          "tenant_notes": {
            "type": "string",
            "nullable": true
          },
          "owner_notes": {
            "type": "string",
            "nullable": true
          },
          "deposit": {
            "type": "string",
            "nullable": true
          },
          "building_name": {
            "type": "string",
            "nullable": true
          },
          "erf_number": {
            "type": "string",
            "nullable": true
          },
          "property_title": {
            "$ref": "#/components/schemas/PropertyTitleEnum"
          },
          "developer": {
            "type": "string",
            "nullable": true
          },
          "build_year": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "build_completion_status": {
            "$ref": "#/components/schemas/BuildingCompletionStatusEnum"
          },
          "property_permit": {
            "type": "string",
            "nullable": true
          },
          "permit_expiry_date": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ListingStatusEnum"
          },
          "price": {
            "type": "string",
            "nullable": true
          },
          "renewal_fee": {
            "type": "string",
            "nullable": true
          },
          "application_fee": {
            "type": "string",
            "nullable": true
          },
          "lease_admin_fee": {
            "type": "string",
            "nullable": true
          },
          "lease_end_date": {
            "type": "string",
            "nullable": true
          },
          "lease_value": {
            "type": "string",
            "nullable": true
          },
          "rental_commission": {
            "type": "string",
            "nullable": true
          },
          "monthly_commission_amount": {
            "type": "string",
            "nullable": true
          },
          "monthly_commission_percent": {
            "type": "string",
            "nullable": true
          },
          "managed": {
            "type": "boolean",
            "nullable": true
          },
          "monthly_commission_type": {
            "type": "string",
            "nullable": true
          },
          "price_reduced": {
            "type": "boolean",
            "nullable": true
          },
          "price_reduced_alert": {
            "type": "boolean",
            "nullable": true
          },
          "sold_status_date": {
            "type": "string",
            "nullable": true
          },
          "sold_price": {
            "type": "string",
            "nullable": true
          },
          "sold_agent": {
            "type": "string",
            "nullable": true
          },
          "price_lease_type": {
            "$ref": "#/components/schemas/PriceLeaseTypeEnum"
          },
          "valuation_price": {
            "type": "string",
            "nullable": true
          },
          "upfront_commission_amount": {
            "type": "string",
            "nullable": true
          },
          "upfront_commission_percent": {
            "type": "string",
            "nullable": true
          },
          "viewing_contact_person": {
            "type": "string",
            "nullable": true
          },
          "viewing_contact_number": {
            "type": "string",
            "nullable": true
          },
          "mandate_commission_amount": {
            "type": "string",
            "nullable": true
          },
          "mandate_commission_split": {
            "type": "string",
            "nullable": true
          },
          "land_size": {
            "type": "string",
            "nullable": true
          },
          "floor_size": {
            "type": "string",
            "nullable": true
          },
          "land_size_measurement_type": {
            "$ref": "#/components/schemas/LandSizeMeasurementTypeEnum"
          },
          "floor_size_measurement_type": {
            "$ref": "#/components/schemas/FloorSizeMeasurementTypeEnum"
          },
          "mandate_commission_split_notes": {
            "type": "string",
            "nullable": true
          },
          "price_term": {
            "$ref": "#/components/schemas/PriceTermEnum"
          },
          "lease_period": {
            "$ref": "#/components/schemas/LeasePeriodEnum"
          },
          "lease_excludes": {
            "type": "string",
            "nullable": true
          },
          "offer_status": {
            "$ref": "#/components/schemas/OfferStatusEnum"
          },
          "offers_from": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "offers_increment": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "farm_name": {
            "type": "boolean",
            "nullable": true
          },
          "bank_repossessed": {
            "type": "boolean",
            "nullable": true
          },
          "distressed": {
            "type": "boolean",
            "nullable": true
          },
          "bank_reference_number": {
            "type": "string",
            "nullable": true
          },
          "bank_reg_date": {
            "type": "string",
            "nullable": true
          },
          "public_tender": {
            "type": "boolean",
            "nullable": true
          },
          "no_transfer_cost": {
            "type": "boolean",
            "nullable": true
          },
          "bank_name": {
            "$ref": "#/components/schemas/OfferBankEnum"
          },
          "quick_sell_options": {
            "$ref": "#/components/schemas/MandateTypeEnum"
          },
          "quick_sell_ref": {
            "type": "string",
            "nullable": true
          },
          "escalation": {
            "$ref": "#/components/schemas/EscalationEnum"
          },
          "annual_escalation": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "available_from": {
            "$ref": "#/components/schemas/ListingAvailableEnum"
          },
          "occupation_date": {
            "type": "string",
            "nullable": true
          },
          "mandate_type": {
            "$ref": "#/components/schemas/MandateTypeEnum"
          },
          "mandate_start_date": {
            "type": "string",
            "nullable": true
          },
          "mandate_end_date": {
            "type": "string",
            "nullable": true
          },
          "mandate_reason_for_selling": {
            "type": "string",
            "nullable": true
          },
          "mandate_notes": {
            "type": "string",
            "nullable": true
          },
          "mandate_commission_percentage": {
            "type": "string",
            "nullable": true
          },
          "on_market_since": {
            "type": "string",
            "nullable": true
          },
          "listing_type": {
            "$ref": "#/components/schemas/ListingTypeEnum"
          },
          "security": {
            "type": "boolean",
            "nullable": true
          },
          "auction": {
            "type": "boolean",
            "nullable": true
          },
          "auction_lots": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "auction_venue": {
            "type": "string",
            "nullable": true
          },
          "auction_lat": {
            "type": "string",
            "nullable": true
          },
          "auction_lng": {
            "type": "string",
            "nullable": true
          },
          "auction_date": {
            "type": "string",
            "nullable": true
          },
          "auction_start_time": {
            "type": "string",
            "nullable": true
          },
          "auction_end_time": {
            "type": "string",
            "nullable": true
          },
          "auction_notes": {
            "type": "string",
            "nullable": true
          },
          "commission_percentage": {
            "type": "string",
            "nullable": true
          },
          "reserve_price": {
            "type": "string",
            "nullable": true
          },
          "starting_price": {
            "type": "string",
            "nullable": true
          },
          "minimum_bid_increment": {
            "type": "string",
            "nullable": true
          },
          "bid_time_extension": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "monthly_rates": {
            "type": "string",
            "nullable": true
          },
          "rates_period": {
            "$ref": "#/components/schemas/PropertyRatePeriodEnum"
          },
          "monthly_levy": {
            "type": "string",
            "nullable": true
          },
          "sectional_title_levy": {
            "type": "string",
            "nullable": true
          },
          "special_levy": {
            "type": "string",
            "nullable": true
          },
          "num_shares": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "share_block_number": {
            "type": "string",
            "nullable": true
          },
          "sectional_scheme_name": {
            "type": "string",
            "nullable": true
          },
          "section_number": {
            "type": "string",
            "nullable": true
          },
          "section_plan_number": {
            "type": "string",
            "nullable": true
          },
          "per_quota": {
            "type": "string",
            "nullable": true
          },
          "body_corp_name": {
            "type": "string",
            "nullable": true
          },
          "body_corp_chairman": {
            "type": "string",
            "nullable": true
          },
          "body_corp_telephone_number": {
            "type": "string",
            "nullable": true
          },
          "supervisor_name": {
            "type": "string",
            "nullable": true
          },
          "supervisor_telephone_number": {
            "type": "string",
            "nullable": true
          },
          "managing_agent": {
            "type": "string",
            "nullable": true
          },
          "managing_agent_telephone_number": {
            "type": "string",
            "nullable": true
          },
          "floor_number": {
            "type": "string",
            "nullable": true
          },
          "payment_frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bathrooms": {
            "type": "string",
            "nullable": true
          },
          "bathrooms_notes": {
            "type": "string",
            "nullable": true
          },
          "property_notes": {
            "type": "string",
            "nullable": true
          },
          "property_sold_rented_to": {
            "type": "string",
            "nullable": true
          },
          "sold_rented_by_3rd_party": {
            "type": "boolean",
            "nullable": true
          },
          "seller_feedback_config": {
            "type": "string",
            "nullable": true
          },
          "municipal_value": {
            "type": "string",
            "nullable": true
          },
          "bedrooms": {
            "type": "string",
            "nullable": true
          },
          "bedrooms_notes": {
            "type": "string",
            "nullable": true
          },
          "study": {
            "type": "string",
            "nullable": true
          },
          "study_notes": {
            "type": "string",
            "nullable": true
          },
          "lounges": {
            "type": "string",
            "nullable": true
          },
          "lounges_notes": {
            "type": "string",
            "nullable": true
          },
          "dining_rooms": {
            "type": "string",
            "nullable": true
          },
          "dining_rooms_notes": {
            "type": "string",
            "nullable": true
          },
          "kitchen": {
            "type": "string",
            "nullable": true
          },
          "kitchen_notes": {
            "type": "string",
            "nullable": true
          },
          "laundry": {
            "type": "string",
            "nullable": true
          },
          "laundry_notes": {
            "type": "string",
            "nullable": true
          },
          "patio": {
            "type": "string",
            "nullable": true
          },
          "patio_notes": {
            "type": "string",
            "nullable": true
          },
          "balcony": {
            "type": "string",
            "nullable": true
          },
          "balcony_notes": {
            "type": "string",
            "nullable": true
          },
          "garages": {
            "type": "string",
            "nullable": true
          },
          "garages_notes": {
            "type": "string",
            "nullable": true
          },
          "carports": {
            "type": "string",
            "nullable": true
          },
          "carports_notes": {
            "type": "string",
            "nullable": true
          },
          "parking_type": {
            "$ref": "#/components/schemas/PropertyParkingTypeEnum"
          },
          "flatlet": {
            "type": "string",
            "nullable": true
          },
          "flatlet_notes": {
            "type": "string",
            "nullable": true
          },
          "domestic_accommodation": {
            "type": "string",
            "nullable": true
          },
          "domestic_accommodation_notes": {
            "type": "string",
            "nullable": true
          },
          "flooring": {
            "$ref": "#/components/schemas/PropertyFloorTypeEnum"
          },
          "flooring_notes": {
            "type": "string",
            "nullable": true
          },
          "exterior": {
            "$ref": "#/components/schemas/PropertyExteriorTypeEnum"
          },
          "exterior_notes": {
            "type": "string",
            "nullable": true
          },
          "roof": {
            "$ref": "#/components/schemas/PropertyRoofTypeEnum"
          },
          "roof_notes": {
            "type": "string",
            "nullable": true
          },
          "pool": {
            "type": "string",
            "nullable": true
          },
          "pool_notes": {
            "type": "string",
            "nullable": true
          },
          "garden_type": {
            "$ref": "#/components/schemas/PropertyGardenTypeEnum"
          },
          "garden_type_notes": {
            "type": "string",
            "nullable": true
          },
          "sea_views": {
            "type": "boolean",
            "nullable": true
          },
          "sea_views_notes": {
            "type": "string",
            "nullable": true
          },
          "security_notes": {
            "type": "string",
            "nullable": true
          },
          "store_room": {
            "type": "boolean",
            "nullable": true
          },
          "store_room_notes": {
            "type": "string",
            "nullable": true
          },
          "walling": {
            "$ref": "#/components/schemas/PropertyWallingTypeEnum"
          },
          "walling_notes": {
            "type": "string",
            "nullable": true
          },
          "pets_allowed": {
            "type": "boolean",
            "nullable": true
          },
          "pets_notes": {
            "type": "string",
            "nullable": true
          },
          "nhbrc": {
            "type": "boolean",
            "nullable": true
          },
          "private_seller": {
            "type": "boolean",
            "nullable": true
          },
          "retirement_unit": {
            "type": "boolean",
            "nullable": true
          },
          "student_accommodation": {
            "type": "boolean",
            "nullable": true
          },
          "furnished": {
            "type": "boolean",
            "nullable": true
          },
          "property_type": {
            "$ref": "#/components/schemas/PropertyTypeEnum"
          },
          "open_hour_date": {
            "type": "string",
            "nullable": true
          },
          "open_hour_time": {
            "type": "string",
            "nullable": true
          },
          "open_hour_agent": {
            "type": "string",
            "nullable": true
          },
          "open_hour_agent_telephone_number": {
            "type": "string",
            "nullable": true
          },
          "bond_bank": {
            "type": "string",
            "nullable": true
          },
          "bond_bank_branch": {
            "type": "string",
            "nullable": true
          },
          "bond_bank_account_number": {
            "type": "string",
            "nullable": true
          },
          "bond_bank_balance": {
            "type": "string",
            "nullable": true
          },
          "managing_agent_email": {
            "type": "string",
            "nullable": true
          },
          "body_corp_email": {
            "type": "string",
            "nullable": true
          },
          "supervisor_email": {
            "type": "string",
            "nullable": true
          },
          "home_owner_levy": {
            "type": "string",
            "nullable": true
          },
          "statistics": {
            "type": "string",
            "nullable": true
          },
          "quality": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeedBatchInfoDto": {
        "type": "object",
        "properties": {
          "deedInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeedInfoDto"
            },
            "nullable": true
          },
          "reportTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "reportName": {
            "type": "string",
            "nullable": true
          },
          "miMasked": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DeedBatchTypeEnum": {
        "enum": [
          "Pending",
          "Available",
          "Unavailable"
        ],
        "type": "string",
        "format": "int32"
      },
      "DeedInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "ownerType": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "contactNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "propertyKey": {
            "type": "string",
            "nullable": true
          },
          "unitNumber": {
            "type": "string",
            "nullable": true
          },
          "sellDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "confidence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "propertyType": {
            "type": "string",
            "nullable": true
          },
          "propertyTypeDescription": {
            "type": "string",
            "nullable": true
          },
          "leadStatus": {
            "$ref": "#/components/schemas/LeadStatusEnum"
          },
          "leadStatusId": {
            "type": "integer",
            "format": "int64"
          },
          "leadStatusDescription": {
            "type": "string",
            "nullable": true
          },
          "ownerAge": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "consentRemovedBy": {
            "type": "string",
            "nullable": true
          },
          "consentRemovedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "emailConfidence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "numberError": {
            "type": "boolean"
          },
          "numberErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "emailError": {
            "type": "boolean"
          },
          "emailErrorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeedNameDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeedNameIdDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "idNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeedsInfoResultDto": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "property_type": {
            "type": "string",
            "nullable": true
          },
          "property_type_name": {
            "type": "string",
            "nullable": true
          },
          "erf_number": {
            "type": "string",
            "nullable": true
          },
          "portion_number": {
            "type": "string",
            "nullable": true
          },
          "town_name": {
            "type": "string",
            "nullable": true
          },
          "has_address": {
            "type": "boolean",
            "nullable": true
          },
          "full_address": {
            "type": "string",
            "nullable": true
          },
          "address_id": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/DeedsInfoResultPositionDto"
          }
        },
        "additionalProperties": false
      },
      "DeedsInfoResultPositionDto": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefectDto": {
        "type": "object",
        "properties": {
          "roofDefect": {
            "$ref": "#/components/schemas/DefectEnum"
          },
          "eelectricalSystemDefect": {
            "$ref": "#/components/schemas/DefectEnum"
          },
          "plumbingSystemDefect": {
            "$ref": "#/components/schemas/DefectEnum"
          },
          "heatingSystemDefect": {
            "$ref": "#/components/schemas/DefectEnum"
          },
          "septicSystemDefect": {
            "$ref": "#/components/schemas/DefectEnum"
          },
          "propertyDefect": {
            "$ref": "#/components/schemas/DefectEnum"
          },
          "connectionDefect": {
            "$ref": "#/components/schemas/DefectEnum"
          }
        },
        "additionalProperties": false
      },
      "DefectEnum": {
        "title": "Defect",
        "enum": [
          null,
          "Yes",
          "No",
          "NA"
        ],
        "type": "String",
        "description": ""
      },
      "DirectorContactDto": {
        "required": [
          "idnumber",
          "name",
          "reportid",
          "surname"
        ],
        "type": "object",
        "properties": {
          "idnumber": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "reportid": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "surname": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "emailOrContact": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DirectorContactResponseDto": {
        "type": "object",
        "properties": {
          "contactDetailsResponse": {
            "$ref": "#/components/schemas/ContactDetailsResponseDto"
          },
          "contactEmailsResponse": {
            "$ref": "#/components/schemas/ContactEmailsResponseDto"
          }
        },
        "additionalProperties": false
      },
      "DirectorContactResponseListDto": {
        "type": "object",
        "properties": {
          "contactDetailsResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactDetailsResponseDto"
            },
            "nullable": true
          },
          "contactEmailsResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactEmailsResponseDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DirectorshipsModuleDto": {
        "type": "object",
        "properties": {
          "activePrincipals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalDto"
            },
            "nullable": true
          },
          "previousPrincipals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrincipalDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ElectricalCertficateEnum": {
        "title": "Electrical Certficate",
        "enum": [
          null,
          "Included",
          "Excluded",
          "NA"
        ],
        "type": "String",
        "description": ""
      },
      "EntityNameHistoryDto": {
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityTypeEnum": {
        "title": "Entity Type",
        "enum": [
          null,
          "Individual",
          "Company",
          "Trust"
        ],
        "type": "String",
        "description": ""
      },
      "ErfSizeUnit": {
        "title": "Erf Size Unit",
        "enum": [
          null,
          "Hectares",
          "SquareMetres"
        ],
        "type": "String",
        "description": ""
      },
      "EscalationEnum": {
        "enum": [
          "Negotiable",
          "SpecifyPercentage"
        ],
        "type": "string",
        "format": "int32"
      },
      "ExteriorFeaturesDto": {
        "type": "object",
        "properties": {
          "windowFrames": {
            "$ref": "#/components/schemas/WindowFrameEnum"
          },
          "walls": {
            "$ref": "#/components/schemas/WallEnum"
          },
          "roofType": {
            "$ref": "#/components/schemas/RoofTypeEnum"
          },
          "gutters": {
            "$ref": "#/components/schemas/GutterEnum"
          },
          "buildingStyle": {
            "$ref": "#/components/schemas/BuildingStyleEnum"
          },
          "buildingFacing": {
            "$ref": "#/components/schemas/BuildingFacingEnum"
          },
          "garden": {
            "$ref": "#/components/schemas/GardenEnum"
          },
          "staffQuarters": {
            "type": "boolean",
            "description": "Does the property have staff quarters",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "flatlet": {
            "type": "boolean",
            "description": "Does the property have a flatlet",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "satelliteDish": {
            "type": "boolean",
            "description": "Does the property have satellite dish installed",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "satelliteInternet": {
            "type": "boolean",
            "description": "Does the property have satellite internet",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "securityPost": {
            "type": "boolean",
            "description": "Does the property have security post",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "paving": {
            "type": "boolean",
            "description": "Does the property have paving",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "balcony": {
            "type": "integer",
            "description": "Number of balconies the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "accessGate": {
            "type": "boolean",
            "description": "Does the property have an access gate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "constructionType": {
            "$ref": "#/components/schemas/ConstructionTypeEnum"
          },
          "outbuildings": {
            "type": "boolean",
            "description": "Does the property have outbuildings",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "garages": {
            "type": "integer",
            "description": "Number of garages the property has",
            "format": "int",
            "nullable": true,
            "example": "2"
          },
          "lapa": {
            "type": "boolean",
            "description": "Does the property have a lapa",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "pool": {
            "type": "boolean",
            "description": "Does the property have a pool",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "carport": {
            "type": "boolean",
            "description": "Does the property have a carport",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "parking": {
            "type": "boolean",
            "description": "Does the property have parking",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "thatchOnProperty": {
            "type": "boolean",
            "description": "Thatch on property",
            "format": "bool",
            "example": "false"
          },
          "vehicleBayNumber": {
            "type": "string",
            "description": "Vehicle bay number",
            "nullable": true,
            "example": "1"
          },
          "vehicleSectionNumber": {
            "type": "string",
            "description": "Vehicle section number",
            "nullable": true,
            "example": "1"
          },
          "erfSize": {
            "type": "number",
            "description": "Erf size in (square meters)",
            "format": "float",
            "nullable": true,
            "example": "1000.00"
          },
          "erfSizeUnit": {
            "$ref": "#/components/schemas/ErfSizeUnit"
          }
        },
        "additionalProperties": false
      },
      "ExtraFixturesDto": {
        "type": "object",
        "properties": {
          "twentyfourHourAccess": {
            "type": "boolean",
            "description": "24-hour access",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "adsl": {
            "type": "boolean",
            "description": "ADSL",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "atrium": {
            "type": "boolean",
            "description": "Atrium",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "awning": {
            "type": "boolean",
            "description": "Awning",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "boatLaunch": {
            "type": "boolean",
            "description": "Boat launch",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "boomedArea": {
            "type": "boolean",
            "description": "Boomed area",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "carpets": {
            "type": "boolean",
            "description": "Carpets",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "centralVacuumSystem": {
            "type": "boolean",
            "description": "Central vacuum system",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "centreIsland": {
            "type": "boolean",
            "description": "Centre island",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "creche": {
            "type": "boolean",
            "description": "Creche",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "deck": {
            "type": "boolean",
            "description": "Deck",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "dialUp": {
            "type": "boolean",
            "description": "Dial-up",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "dishwasherConnection": {
            "type": "boolean",
            "description": "Dishwasher connection",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "driveway": {
            "type": "boolean",
            "description": "Driveway",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "electricityIncluded": {
            "type": "boolean",
            "description": "Electricity included",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "eyeLevelOven": {
            "type": "boolean",
            "description": "Eye level oven",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "fixedWiMax": {
            "type": "boolean",
            "description": "Fixed WiMax",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "garbageDisposal": {
            "type": "boolean",
            "description": "Garbage disposal",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "gasHob": {
            "type": "boolean",
            "description": "Gas hob",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "gasOven": {
            "type": "boolean",
            "description": "Gas oven",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "graniteTops": {
            "type": "boolean",
            "description": "Granite tops",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "grill": {
            "type": "boolean",
            "description": "Grill",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "gym": {
            "type": "boolean",
            "description": "Gym",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "handicapAvailable": {
            "type": "boolean",
            "description": "Handicap available",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "isdn": {
            "type": "boolean",
            "description": "ISDN",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "icemaker": {
            "type": "boolean",
            "description": "Icemaker",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "indoorBeams": {
            "type": "boolean",
            "description": "Indoor beams",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "internetPort": {
            "type": "boolean",
            "description": "Internet port",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "jetty": {
            "type": "boolean",
            "description": "Jetty",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "laminatedFloors": {
            "type": "boolean",
            "description": "Laminated floors",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "lifts": {
            "type": "boolean",
            "description": "Lifts",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "linenRoom": {
            "type": "boolean",
            "description": "Linen room",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "medicalCare": {
            "type": "boolean",
            "description": "Medical care",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "ovenHob": {
            "type": "boolean",
            "description": "Oven hob",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "parquetFloors": {
            "type": "boolean",
            "description": "Parquet floors",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "partiallyFenced": {
            "type": "boolean",
            "description": "Partially fenced",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "pipedGas": {
            "type": "boolean",
            "description": "Piped gas",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "pizzaOven": {
            "type": "boolean",
            "description": "Pizza oven",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "pressedCeilings": {
            "type": "boolean",
            "description": "Pressed ceilings",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "safe": {
            "type": "boolean",
            "description": "Safe",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "sauna": {
            "type": "boolean",
            "description": "Sauna",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "septicTank": {
            "type": "boolean",
            "description": "Septic tank",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "sharedLiving": {
            "type": "boolean",
            "description": "Shared living",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "slidingDoors": {
            "type": "boolean",
            "description": "Sliding doors",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "solarGeyser": {
            "type": "boolean",
            "description": "Solar geyser",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "spaPool": {
            "type": "boolean",
            "description": "Spa pool",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "specialDoors": {
            "type": "boolean",
            "description": "Special doors",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "specialLights": {
            "type": "boolean",
            "description": "Special lights",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "strongRoom": {
            "type": "boolean",
            "description": "Strong room",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "subdivisionRights": {
            "type": "boolean",
            "description": "Subdivision rights",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "tv": {
            "type": "boolean",
            "description": "TV",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "tvPort": {
            "type": "boolean",
            "description": "TV port",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "telephonePort": {
            "type": "boolean",
            "description": "Telephone port",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "tennisCourt": {
            "type": "boolean",
            "description": "Tennis court",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "tiledFloors": {
            "type": "boolean",
            "description": "Tiled floors",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "tumbleDryer": {
            "type": "boolean",
            "description": "Tumble dryer",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "underCounterOven": {
            "type": "boolean",
            "description": "Under counter oven",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "vdsl": {
            "type": "boolean",
            "description": "VDSL",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "veranda": {
            "type": "boolean",
            "description": "Veranda",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "washingMachineConnection": {
            "type": "boolean",
            "description": "Washing machine connection",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "wallpaper": {
            "type": "boolean",
            "description": "Wallpaper",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "waterCooler": {
            "type": "boolean",
            "description": "Water cooler",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "waterIncluded": {
            "type": "boolean",
            "description": "Water included",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "waterTank": {
            "type": "boolean",
            "description": "Water tank",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "woodceilings": {
            "type": "boolean",
            "description": "Woodceilings",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "closedCircuitTV": {
            "type": "boolean",
            "description": "Closed circuit TV",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "guard": {
            "type": "boolean",
            "description": "Guard",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "pantry": {
            "type": "boolean",
            "description": "Pantry",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "twentyfourhourresponse": {
            "type": "boolean",
            "description": "24-hour response",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "communalBraaiArea": {
            "type": "boolean",
            "description": "Communal braai area",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "coolingfans": {
            "type": "boolean",
            "description": "Coolingfans",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "guestToilet": {
            "type": "boolean",
            "description": "Guest toilet",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "alarmSystem": {
            "type": "boolean",
            "description": "Alarm system",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "electricGarage": {
            "type": "boolean",
            "description": "Electric garage",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "intercom": {
            "type": "boolean",
            "description": "Intercom",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "solarHeating": {
            "type": "boolean",
            "description": "Solar heating",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "borehole": {
            "type": "boolean",
            "description": "Borehole",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "electricGate": {
            "type": "boolean",
            "description": "Electric gate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "storage": {
            "type": "boolean",
            "description": "Storage",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "breakfastNook": {
            "type": "boolean",
            "description": "Breakfast nook",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "electricfencing": {
            "type": "boolean",
            "description": "Electricfencing",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "irrigationSystem": {
            "type": "boolean",
            "description": "Irrigation system",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "totallyfencedWalled": {
            "type": "boolean",
            "description": "Totallyfenced walled",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "builtInBar": {
            "type": "boolean",
            "description": "Built-in bar",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "extractorfan": {
            "type": "boolean",
            "description": "Extractorfan",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "jacuzzi": {
            "type": "boolean",
            "description": "Jacuzzi",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "underfloorheating": {
            "type": "boolean",
            "description": "Underfloorheating",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "fibre": {
            "type": "boolean",
            "description": "Fibre",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "lapa": {
            "type": "boolean",
            "description": "Lapa",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "wendyHouse": {
            "type": "boolean",
            "description": "Wendy house",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "burglarBars": {
            "type": "boolean",
            "description": "Burglar bars",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "firePlace": {
            "type": "boolean",
            "description": "Fire place",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "outdoorbeams": {
            "type": "boolean",
            "description": "Outdoorbeams",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "woodenFloors": {
            "type": "boolean",
            "description": "Wooden floors",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "pets": {
            "type": "boolean",
            "description": "Does the property allow pets",
            "format": "bool",
            "nullable": true,
            "example": "false"
          }
        },
        "additionalProperties": false
      },
      "FeatureTypeEnum": {
        "title": "Feature Type",
        "enum": [
          null,
          "Farm",
          "Municipality",
          "Neighbourhood",
          "Property",
          "Scheme",
          "Subplace",
          "Town",
          "Property_Scheme",
          "Suburb",
          "Suburb_Part"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided type is not listed above"
      },
      "FloorSizeMeasurementTypeEnum": {
        "enum": [
          "SquareMetres",
          "SquareFeet"
        ],
        "type": "string",
        "format": "int32"
      },
      "GardenEnum": {
        "title": "Garden",
        "enum": [
          null,
          "CommunalGarden",
          "GardenServices",
          "GoodCondition",
          "Small",
          "Large",
          "Manual",
          "Landscaped",
          "SprinklerSystem",
          "Auto"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided garden is not listed above"
      },
      "GeocodeV3Address_PartsDtoV2": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "nullable": true
          },
          "street_number": {
            "type": "string",
            "nullable": true
          },
          "suburb": {
            "type": "string",
            "nullable": true
          },
          "subplace": {
            "type": "string",
            "nullable": true
          },
          "city_town": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeocodeV3AttributesDtoV2": {
        "type": "object",
        "properties": {
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "property_has_sectional_units": {
            "type": "boolean",
            "nullable": true
          },
          "scheme_id": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "address_id": {
            "type": "string",
            "nullable": true
          },
          "address_parts": {
            "$ref": "#/components/schemas/GeocodeV3Address_PartsDtoV2"
          },
          "is_lowest_with_sectional_units": {
            "type": "boolean"
          },
          "parent_type": {
            "type": "string",
            "nullable": true
          },
          "parent_address_id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeocodeV3LocationDtoV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "nullable": true
          },
          "subcategory": {
            "type": "string",
            "nullable": true
          },
          "candidate": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/GeocodeV3PositionDtoV2"
          },
          "attributes": {
            "$ref": "#/components/schemas/GeocodeV3AttributesDtoV2"
          }
        },
        "additionalProperties": false
      },
      "GeocodeV3PositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GpsCoordinateDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GutterEnum": {
        "title": "Gutter",
        "enum": [
          null,
          "Steel",
          "Aluminum"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided gutter is not listed above"
      },
      "ImageTypeEnum": {
        "enum": [
          "PNG",
          "JPG"
        ],
        "type": "string",
        "format": "int32"
      },
      "InteriorFeaturesDto": {
        "type": "object",
        "properties": {
          "bedrooms": {
            "type": "number",
            "description": "Number of bedrooms the property has",
            "format": "int",
            "nullable": true,
            "example": "2"
          },
          "bathrooms": {
            "type": "number",
            "description": "Number of bathrooms the property has",
            "format": "float",
            "nullable": true,
            "example": "2"
          },
          "lounges": {
            "type": "integer",
            "description": "Number of lounges the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "diningRooms": {
            "type": "integer",
            "description": "Number of dining rooms the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "study": {
            "type": "integer",
            "description": "Number of studies/offices the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "kitchens": {
            "type": "integer",
            "description": "Number of kitchens the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "builtInBraais": {
            "type": "integer",
            "description": "Number of built in braais the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "entranceHalls": {
            "type": "integer",
            "description": "Number of entrance halls the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "patios": {
            "type": "integer",
            "description": "Number of patios the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "entertainmentRooms": {
            "type": "integer",
            "description": "Number of entertainment rooms the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "fireplaces": {
            "type": "integer",
            "description": "Number of fireplaces the property has",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "laundries": {
            "type": "boolean",
            "description": "Does the property have a laundry room",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "furnished": {
            "type": "boolean",
            "description": "Does the property have furniture",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "builtInCupboards": {
            "type": "boolean",
            "description": "Does the property have built in cupboards",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "walkInCloset": {
            "type": "boolean",
            "description": "Does the property have walk in closets",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "scullery": {
            "type": "boolean",
            "description": "Does the property have a scullery",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "guestToilets": {
            "type": "integer",
            "description": "Number of guest toilets the property has",
            "format": "bool",
            "nullable": true,
            "example": "1"
          },
          "tvRooms": {
            "type": "integer",
            "description": "Number of TV rooms the property has",
            "format": "bool",
            "nullable": true,
            "example": "1"
          },
          "aircon": {
            "type": "boolean",
            "description": "Does the property have aircon",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "recreationRoom": {
            "type": "boolean",
            "description": "Does the Property Have a recreation room",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "domesticRoom": {
            "type": "boolean",
            "description": "Does the property have a domestic room",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "enSuite": {
            "type": "boolean",
            "description": "Does the bedrooms have en-suite bathrooms",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "floorsType": {
            "type": "string",
            "description": "What type of floors does the property have",
            "nullable": true,
            "example": "Tile"
          },
          "numberOfFloors": {
            "type": "integer",
            "description": "Number of floors",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "floorSize": {
            "type": "number",
            "description": "Floor size in (square meters)",
            "format": "float",
            "nullable": true,
            "example": "200.00"
          },
          "buildingFootprintSize": {
            "type": "number",
            "description": "Building footprint size in (square meters)",
            "format": "float",
            "nullable": true,
            "example": "100.00"
          }
        },
        "additionalProperties": false
      },
      "LandSizeMeasurementTypeEnum": {
        "enum": [
          "SquareMetres",
          "Hectares",
          "SquareFeet",
          "Acres"
        ],
        "type": "string",
        "format": "int32"
      },
      "LeadStatusEnum": {
        "enum": [
          "Open",
          "Active",
          "Archived"
        ],
        "type": "string",
        "format": "int32"
      },
      "LeasePeriodEnum": {
        "enum": [
          "OneMonth",
          "TwoMonths",
          "ThreeMonths",
          "SixMonths",
          "TwelveMonths",
          "TwentyFourMonths",
          "ThirtySixMonths",
          "FortyEightMonths",
          "SixtyMonths",
          "TenYearPlus",
          "FifteenYearPlus",
          "TwentyFiveYearPlus",
          "ThirtyFiveYearPlus",
          "Negotiable"
        ],
        "type": "string",
        "format": "int32"
      },
      "LegalDto": {
        "type": "object",
        "properties": {
          "fullTitleDescription": {
            "type": "string",
            "description": "Full title description",
            "nullable": true,
            "example": "TBC"
          },
          "sectionalTitleDescription": {
            "type": "string",
            "description": "Sectional title description",
            "nullable": true,
            "example": "TBC"
          },
          "zoneInformation": {
            "type": "string",
            "description": "Zone information",
            "nullable": true,
            "example": "TBC"
          },
          "ownershipType": {
            "$ref": "#/components/schemas/OwnershipTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "LifestyleFixturesDto": {
        "type": "object",
        "properties": {
          "aquaticActivities": {
            "type": "boolean",
            "description": "Aquatic activities",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "mountain": {
            "type": "boolean",
            "description": "Mountain",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "winelands": {
            "type": "boolean",
            "description": "Winelands",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "waterfront": {
            "type": "boolean",
            "description": "Waterfront",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "fishing": {
            "type": "boolean",
            "description": "Fishing",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "golf": {
            "type": "boolean",
            "description": "Golf",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "university": {
            "type": "boolean",
            "description": "University",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "countryClub": {
            "type": "boolean",
            "description": "Country club",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "clubhouse": {
            "type": "boolean",
            "description": "Clubhouse",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "lakefront": {
            "type": "boolean",
            "description": "Lakefront",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "coastal": {
            "type": "boolean",
            "description": "Coastal/Beach",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "marina": {
            "type": "boolean",
            "description": "Marina",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "natureReserve": {
            "type": "boolean",
            "description": "Nature Reserve",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "complex": {
            "type": "boolean",
            "description": "Complex",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "culdesac": {
            "type": "boolean",
            "description": "Cul-de-sac",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "equestrianEstate": {
            "type": "boolean",
            "description": "Equestrian estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "metropolitan": {
            "type": "boolean",
            "description": "Metropolitan",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "retirementVillage": {
            "type": "boolean",
            "description": "Retirement village",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "securityEstate": {
            "type": "boolean",
            "description": "Security estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "wildlifeEstate": {
            "type": "boolean",
            "description": "Wildlife estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "gatedCommunity": {
            "type": "boolean",
            "description": "Gated community",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "holidayResort": {
            "type": "boolean",
            "description": "Holiday resort",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "ecoEstate": {
            "type": "boolean",
            "description": "Eco estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "fishingEstate": {
            "type": "boolean",
            "description": "Fishing estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "securityComplex": {
            "type": "boolean",
            "description": "Security complex",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "suburban": {
            "type": "boolean",
            "description": "Suburban",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "wellnessEstate": {
            "type": "boolean",
            "description": "Wellness estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "islandEstate": {
            "type": "boolean",
            "description": "Island estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "golfEstate": {
            "type": "boolean",
            "description": "Golf estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "gameFarm": {
            "type": "boolean",
            "description": "Game farm",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "casinoEstate": {
            "type": "boolean",
            "description": "Casino estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "dualLiving": {
            "type": "boolean",
            "description": "Dual living",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "estate": {
            "type": "boolean",
            "description": "Estate",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "lifestyleFarm": {
            "type": "boolean",
            "description": "Lifestyle farm",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "countryLiving": {
            "type": "boolean",
            "description": "Country living",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "newDevelopment": {
            "type": "boolean",
            "description": "New development",
            "format": "bool",
            "nullable": true,
            "example": "false"
          }
        },
        "additionalProperties": false
      },
      "ListingAvailableEnum": {
        "enum": [
          "Immediately",
          "Negotiable",
          "SpecificDate"
        ],
        "type": "string",
        "format": "int32"
      },
      "ListingDetailsDto": {
        "required": [
          "listingDate",
          "listingPrice"
        ],
        "type": "object",
        "properties": {
          "sellingReason": {
            "$ref": "#/components/schemas/SellingReasonEnum"
          },
          "saleStatus": {
            "$ref": "#/components/schemas/SaleStatusEnum"
          },
          "listingPrice": {
            "type": "number",
            "description": "Listing price",
            "format": "float",
            "example": "2000000.00"
          },
          "listingDate": {
            "type": "string",
            "description": "Sign date (YYYY/MM/DD)",
            "format": "date",
            "example": "2020/01/01"
          },
          "mandate": {
            "$ref": "#/components/schemas/MandateDto"
          },
          "onShowDto": {
            "$ref": "#/components/schemas/OnShowDto"
          },
          "listingDateDay": {
            "type": "integer",
            "description": "Day listed",
            "format": "int",
            "example": "17"
          },
          "listingDateMonth": {
            "type": "integer",
            "description": "Month listed",
            "format": "int",
            "example": "1"
          },
          "listingDateYear": {
            "type": "integer",
            "description": "Year listed",
            "format": "int",
            "example": "2020"
          },
          "isRental": {
            "type": "boolean",
            "description": "Indicates if rental",
            "format": "bool",
            "nullable": true,
            "example": "false"
          }
        },
        "additionalProperties": false
      },
      "ListingDto": {
        "required": [
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Creation date (YYYY/MM/DD)",
            "format": "date",
            "readOnly": true,
            "example": "2020/01/01"
          },
          "idString": {
            "type": "string",
            "description": "Id string",
            "nullable": true,
            "example": "12345abc1d1234e123abc123"
          },
          "propertyId": {
            "maxLength": 24,
            "type": "string",
            "description": "Property id (SG Code)",
            "nullable": true,
            "example": "L1"
          },
          "sourceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique key from the source",
            "example": "FEE12345"
          },
          "details": {
            "$ref": "#/components/schemas/ListingDetailsDto"
          },
          "property": {
            "$ref": "#/components/schemas/PropertyDto"
          },
          "seller": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          },
          "tenant": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "description": "Id of user who created listing",
            "format": "long",
            "nullable": true,
            "example": "1"
          },
          "currentUserListing": {
            "type": "boolean",
            "description": "Indicates if user making request created listing",
            "format": "bool",
            "example": "false"
          }
        },
        "additionalProperties": false
      },
      "ListingDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ListingStatusEnum": {
        "enum": [
          "Active",
          "Pending",
          "Rented",
          "Sold",
          "Archived",
          "Valuation"
        ],
        "type": "string",
        "format": "int32"
      },
      "ListingTypeEnum": {
        "enum": [
          "ForSale",
          "ToLet"
        ],
        "type": "string",
        "format": "int32"
      },
      "MandateDto": {
        "required": [
          "mandateType"
        ],
        "type": "object",
        "properties": {
          "mandateType": {
            "$ref": "#/components/schemas/MandateTypeEnum"
          },
          "mandateTypeDescription": {
            "type": "string",
            "description": "Mandate type description",
            "nullable": true,
            "example": "Sole"
          },
          "startDate": {
            "type": "string",
            "description": "Start date (YYYY/MM/DD)",
            "format": "date",
            "nullable": true,
            "example": "2020/01/01"
          },
          "endDate": {
            "type": "string",
            "description": "End date (YYYY/MM/DD)",
            "format": "date",
            "nullable": true,
            "example": "2020/02/01"
          },
          "commissionPercentage": {
            "type": "number",
            "description": "Commission percentage",
            "format": "float",
            "nullable": true,
            "example": "10.5"
          },
          "commissionAmount": {
            "type": "number",
            "description": "Commission amount",
            "format": "float",
            "nullable": true,
            "example": "20000"
          },
          "commissionSplit": {
            "type": "number",
            "description": "Commission split",
            "format": "float",
            "nullable": true,
            "example": "50"
          }
        },
        "additionalProperties": false
      },
      "MandateTypeEnum": {
        "title": "Mandate Type",
        "enum": [
          null,
          "Sole",
          "Open",
          "Joint",
          "Company",
          "Exclusive",
          "MLS",
          "PLN",
          "Referral",
          "Rental",
          "Unknown",
          "Shared"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided type is not listed above"
      },
      "MapAddressDto": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "nullable": true
          },
          "street_number": {
            "type": "string",
            "nullable": true
          },
          "street_number_type": {
            "type": "string",
            "nullable": true
          },
          "street_number_function": {
            "type": "string",
            "nullable": true
          },
          "complex": {
            "type": "string",
            "nullable": true
          },
          "major_complex": {
            "type": "string",
            "nullable": true
          },
          "suburb": {
            "type": "string",
            "nullable": true
          },
          "subplace": {
            "type": "string",
            "nullable": true
          },
          "city_town": {
            "type": "string",
            "nullable": true
          },
          "municipality": {
            "type": "string",
            "nullable": true
          },
          "district": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "province_code": {
            "type": "string",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "nullable": true
          },
          "full_address": {
            "type": "string",
            "nullable": true
          },
          "short_address": {
            "type": "string",
            "nullable": true
          },
          "mapcode": {
            "type": "string",
            "nullable": true
          },
          "plus_code": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/MapAddressPositionDto"
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "market_area_id": {
            "type": "string",
            "nullable": true
          },
          "market_area": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapAddressPositionDto": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapAreaReportSalesPositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapCdnTokenDto": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host",
            "nullable": true,
            "example": "https://demohost.com"
          },
          "token": {
            "type": "string",
            "description": "Token",
            "nullable": true,
            "example": "a0AaaaaAA0AaAAAa0AaAaAAAAAaAa0a0"
          }
        },
        "additionalProperties": false
      },
      "MapFeatureDtoV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "geometry": {
            "$ref": "#/components/schemas/MapFeatureGeometryDtoV2"
          },
          "properties": {
            "$ref": "#/components/schemas/MapFeaturePropertiesDtoV2"
          }
        },
        "additionalProperties": false
      },
      "MapFeatureGeometryDtoV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "coordinates": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapFeaturePropertiesDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "has_sectional_units": {
            "type": "boolean"
          },
          "is_lowest_with_sectional_units": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MapLegendDtoV2": {
        "type": "object",
        "properties": {
          "registrationAgeLegend": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapLegendRegistrationagelegendDtoV2"
            },
            "nullable": true
          },
          "ownerAgeLegend": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapLegendOwneragelegendDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapLegendOwneragelegendDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "colour": {
            "type": "string",
            "nullable": true
          },
          "opacity": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "line_colour": {
            "type": "string",
            "nullable": true
          },
          "line_opacity": {
            "type": "string",
            "nullable": true
          },
          "line_width": {
            "type": "string",
            "nullable": true
          },
          "line_stroke": {
            "type": "string",
            "nullable": true
          },
          "minimum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "category_number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapLegendRegistrationagelegendDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "colour": {
            "type": "string",
            "nullable": true
          },
          "opacity": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "line_colour": {
            "type": "string",
            "nullable": true
          },
          "line_opacity": {
            "type": "string",
            "nullable": true
          },
          "line_width": {
            "type": "string",
            "nullable": true
          },
          "line_stroke": {
            "type": "string",
            "nullable": true
          },
          "minimum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "category_number": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapPropertyReportSalesPositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapPropertyReportTransfer_AdjustmentV2Dto": {
        "type": "object",
        "properties": {
          "sell_price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "classification": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetInfoSubplaceGeometryDtoV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "coordinates": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetInfoSubplaceSubplace_FeatureDtoV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "geometry": {
            "$ref": "#/components/schemas/MapStreetInfoSubplaceGeometryDtoV2"
          }
        },
        "additionalProperties": false
      },
      "MapStreetInfoSubplaceSubplace_StreetsDtoV2": {
        "type": "object",
        "properties": {
          "street_id": {
            "type": "string",
            "nullable": true
          },
          "subplace": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "selected": {
            "type": "boolean"
          },
          "subplace_feature": {
            "$ref": "#/components/schemas/MapStreetInfoSubplaceSubplace_FeatureDtoV2"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetPropertyDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetPropertyDtoV2": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "street_number": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/MapStreetPropertyPositionDtoV2"
          }
        },
        "additionalProperties": false
      },
      "MapStreetPropertyPositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportAmenityDtoV2": {
        "type": "object",
        "properties": {
          "shopping_centres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportShopping_CentreDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportBond_Holder_GroupDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportBuilding_SizesDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "median": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportDistributionDtoV2": {
        "type": "object",
        "properties": {
          "minimum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportFull_TitleDtoV2": {
        "type": "object",
        "properties": {
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "building_sizes": {
            "$ref": "#/components/schemas/MapStreetReportBuilding_SizesDtoV2"
          },
          "bond_holder_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportBond_Holder_GroupDtoV2"
            },
            "nullable": true
          },
          "house_price_classifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportHouse_Price_ClassificationDtoV2"
            },
            "nullable": true
          },
          "owner_ages": {
            "$ref": "#/components/schemas/MapStreetReportOwner_AgeDtoV2"
          },
          "owner_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportOwner_TypeDtoV2"
            },
            "nullable": true
          },
          "recent_buyer_ages": {
            "$ref": "#/components/schemas/MapStreetReportRecent_Buyer_AgeDtoV2"
          },
          "recent_seller_ages": {
            "$ref": "#/components/schemas/MapStreetReportRecent_Seller_AgeDtoV2"
          },
          "registration_ages": {
            "$ref": "#/components/schemas/MapStreetReportRegistration_AgeDtoV2"
          },
          "stand_sizes": {
            "$ref": "#/components/schemas/MapStreetReportStand_SizeDtoV2"
          },
          "valuations": {
            "$ref": "#/components/schemas/MapStreetReportValuationDtoV2"
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportHouse_Price_ClassificationDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportOwner_AgeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportOwner_TypeDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportPositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportPropertiesDtoV2": {
        "type": "object",
        "properties": {
          "full_title": {
            "$ref": "#/components/schemas/MapStreetReportFull_TitleDtoV2"
          },
          "sectional_title": {
            "$ref": "#/components/schemas/MapStreetReportSectional_TitleDtoV2"
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportRecent_Buyer_AgeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportRecent_Seller_AgeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportRegistration_AgeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportSchemeDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "full_title_units": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sectional_title_units": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/MapStreetReportPositionDtoV2"
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportSectional_TitleDtoV2": {
        "type": "object",
        "properties": {
          "stock": {
            "type": "integer",
            "format": "int32"
          },
          "building_sizes": {
            "$ref": "#/components/schemas/MapStreetReportBuilding_SizesDtoV2"
          },
          "bond_holder_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportBond_Holder_GroupDtoV2"
            },
            "nullable": true
          },
          "house_price_classifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportHouse_Price_ClassificationDtoV2"
            },
            "nullable": true
          },
          "owner_ages": {
            "$ref": "#/components/schemas/MapStreetReportOwner_AgeDtoV2"
          },
          "owner_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportOwner_TypeDtoV2"
            },
            "nullable": true
          },
          "recent_buyer_ages": {
            "$ref": "#/components/schemas/MapStreetReportRecent_Buyer_AgeDtoV2"
          },
          "recent_seller_ages": {
            "$ref": "#/components/schemas/MapStreetReportRecent_Seller_AgeDtoV2"
          },
          "registration_ages": {
            "$ref": "#/components/schemas/MapStreetReportRegistration_AgeDtoV2"
          },
          "valuations": {
            "$ref": "#/components/schemas/MapStreetReportValuationDtoV2"
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportShopping_CentreDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/MapStreetReportPositionDtoV2"
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportStand_SizeDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "median": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MapStreetReportValuationDtoV2": {
        "type": "object",
        "properties": {
          "average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "median": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportDistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketAreaDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "marketAreaId": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "marketAreaName": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "marketAreaAlternativeName": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "extensionId": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "extensionName": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "extensionAlternativeName": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "province": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "townName": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "geometryJson": {
            "type": "string",
            "nullable": true
          },
          "listingId": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketAreaListDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "marketAreaId": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "alternativeName": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "listingId": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "type": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "typeId": {
            "type": "integer",
            "format": "int32"
          },
          "parentName": {
            "maxLength": 110,
            "type": "string",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MarketAreaListDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketAreaListDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OfferBankEnum": {
        "title": "Offer Bank",
        "enum": [
          null,
          "SBSA",
          "ABSA",
          "FNB",
          "Nedcor",
          "Sanlam",
          "Ithala",
          "NationalHousingFinanceCorporation",
          "BlueFinancialServices",
          "Investec",
          "RMBPrivateBank",
          "HiPInvestorTrust",
          "MercantileBank",
          "GBSMutualBank",
          "SentinelHomes",
          "Paragon",
          "FNBCommercial",
          "NedbankPrivateWealth",
          "BOE",
          "VBSMutualBank",
          "Nedbank",
          "SAHomeLoans",
          "Multiple",
          "Other"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided bank is not listed above"
      },
      "OfferDto": {
        "required": [
          "purchasePrice",
          "signDate"
        ],
        "type": "object",
        "properties": {
          "purchasePrice": {
            "type": "number",
            "description": "Purchase price",
            "format": "float",
            "example": "2000000"
          },
          "deposit": {
            "type": "number",
            "description": "Deposit",
            "format": "float",
            "nullable": true,
            "example": "200000"
          },
          "mortgageLoan": {
            "type": "number",
            "description": "Mortgage loan",
            "format": "float",
            "nullable": true,
            "example": "1800000"
          },
          "saleOfAnother": {
            "type": "boolean",
            "description": "Sale of another Property",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "signDate": {
            "type": "string",
            "description": "Sign Date (YYYY/MM/DD)",
            "format": "date",
            "example": "2020/01/23"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date (YYYY/MM/DD)",
            "format": "date",
            "nullable": true,
            "example": "2020/02/01"
          },
          "approvedDate": {
            "type": "string",
            "description": "Approved date (YYYY/MM/DD)",
            "format": "date",
            "nullable": true,
            "example": "2020/02/02"
          },
          "accepted": {
            "type": "boolean",
            "description": "Accepted",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "electricalCertficate": {
            "$ref": "#/components/schemas/ElectricalCertficateEnum"
          },
          "authorizeECInspection": {
            "type": "boolean",
            "description": "Authorize electrical certificate inspection",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "authorizeBeetleInspection": {
            "type": "boolean",
            "description": "Authorize beetle inspection",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "authorizeGasInspection": {
            "type": "boolean",
            "description": "Authorize gas inspection",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "authorizeWPInspection": {
            "type": "boolean",
            "description": "Authorize water/plumbing inspection",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "authorizeEFInspection": {
            "type": "boolean",
            "description": "Authorize electric fence inspection",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "rates": {
            "type": "number",
            "description": "Rates",
            "format": "float",
            "nullable": true,
            "example": "1000"
          },
          "defects": {
            "$ref": "#/components/schemas/DefectDto"
          },
          "currentBond": {
            "$ref": "#/components/schemas/BondDto"
          },
          "signDateDay": {
            "type": "integer",
            "description": "Day signed",
            "format": "int",
            "example": "1"
          },
          "signDateMonth": {
            "type": "integer",
            "description": "Month signed",
            "format": "int",
            "example": "12"
          },
          "signDateYear": {
            "type": "integer",
            "description": "Year signed",
            "format": "int",
            "example": "2020"
          },
          "expiryDateDay": {
            "type": "integer",
            "description": "Expiry day",
            "format": "int",
            "example": "2"
          },
          "expiryDateMonth": {
            "type": "integer",
            "description": "Expiry month",
            "format": "int",
            "example": "1"
          },
          "expiryDateYear": {
            "type": "integer",
            "description": "Expiry year",
            "format": "int",
            "example": "2020"
          },
          "approvedDateDay": {
            "type": "integer",
            "description": "Day approved",
            "format": "int",
            "example": "1"
          },
          "approvedDateMonth": {
            "type": "integer",
            "description": "Month approved",
            "format": "int",
            "example": "2"
          },
          "approvedDateYear": {
            "type": "integer",
            "description": "Year approved",
            "format": "int",
            "example": "2020"
          },
          "bankStatusReceivedDate": {
            "type": "string",
            "description": "Bank status received date (YYYY/MM/DD)",
            "format": "date",
            "nullable": true,
            "example": "2020/01/01"
          },
          "bonded": {
            "type": "boolean",
            "description": "Is offer bonded",
            "format": "bool",
            "nullable": true,
            "example": "false"
          },
          "bank": {
            "$ref": "#/components/schemas/OfferBankEnum"
          },
          "grantAmount": {
            "type": "number",
            "description": "Grant amount",
            "format": "float",
            "nullable": true,
            "example": "500000"
          },
          "bondRegistrationAmount": {
            "type": "number",
            "description": "Bond registration amount",
            "format": "float",
            "nullable": true,
            "example": "500000"
          },
          "bankPropertyAddress": {
            "type": "string",
            "description": "Bank Property Address",
            "nullable": true,
            "example": "Address"
          },
          "titleDeedNumber": {
            "type": "string",
            "description": "Title Deed Number",
            "nullable": true,
            "example": "ST8715/2023"
          },
          "schemeName": {
            "type": "string",
            "description": "Scheme Name",
            "nullable": true,
            "example": "SS BELHAR LOFTS"
          }
        },
        "additionalProperties": false
      },
      "OfferStatusEnum": {
        "enum": [
          "AcceptingOffers",
          "OfferPending",
          "OfferAccepted"
        ],
        "type": "string",
        "format": "int32"
      },
      "OnShowDto": {
        "type": "object",
        "properties": {
          "onShow": {
            "type": "boolean",
            "description": "On show",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "showDate": {
            "type": "string",
            "description": "Show date (YYYY/MM/DD)",
            "format": "date",
            "nullable": true,
            "example": "2020/01/01"
          },
          "onShowSaterdays": {
            "type": "boolean",
            "description": "On show saterdays",
            "format": "bool",
            "nullable": true,
            "example": "true"
          },
          "onShowSundays": {
            "type": "boolean",
            "description": "On show sundays",
            "format": "bool",
            "nullable": true,
            "example": "true"
          }
        },
        "additionalProperties": false
      },
      "OtpDto": {
        "required": [
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Creation date (YYYY/MM/DD)",
            "format": "date",
            "readOnly": true,
            "example": "2020/01/01"
          },
          "idString": {
            "type": "string",
            "description": "Id string",
            "nullable": true,
            "example": "12345abc1d1234e123abc123"
          },
          "sourceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique key from the source",
            "example": "1"
          },
          "propertyId": {
            "maxLength": 24,
            "type": "string",
            "description": "Property id (SG Code)",
            "nullable": true,
            "example": "L1"
          },
          "property": {
            "$ref": "#/components/schemas/PropertyDto"
          },
          "offer": {
            "$ref": "#/components/schemas/OfferDto"
          },
          "agent": {
            "$ref": "#/components/schemas/AgentDto"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "currentUserOtp": {
            "type": "boolean"
          },
          "applicationStatus": {
            "$ref": "#/components/schemas/ApplicationStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "OtpDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtpDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OwnershipTypeEnum": {
        "title": "Ownership Type",
        "enum": [
          null,
          "Freehold",
          "Leasehold",
          "RealRight"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided type is not listed above"
      },
      "PageDetailsDto": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "remainingItems": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PagedContactDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "properties": {
            "type": "integer",
            "format": "int32"
          },
          "owners": {
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "processedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ownerNameAndId": {
            "type": "boolean"
          },
          "ownerContactNumber": {
            "type": "boolean"
          },
          "ownerEmail": {
            "type": "boolean"
          },
          "reportName": {
            "type": "string",
            "nullable": true
          },
          "deedBatchType": {
            "$ref": "#/components/schemas/DeedBatchTypeEnum"
          },
          "creditsUsed": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedContactDetailDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PagedContactDetailDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PagedPropertyReportDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time"
          },
          "unitNumber": {
            "type": "string",
            "nullable": true
          },
          "propertyKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedPropertyReportDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PagedPropertyReportDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PartyDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 150,
            "type": "string",
            "description": "Purchaser code",
            "nullable": true,
            "example": "Party Name"
          },
          "idNumber": {
            "maxLength": 13,
            "type": "string",
            "description": "Id number",
            "nullable": true,
            "example": "YYMMDDSSSSCAZ"
          },
          "physicalAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "emailAddress": {
            "maxLength": 150,
            "type": "string",
            "description": "Email address",
            "nullable": true,
            "example": "example@loom.co.za"
          },
          "phoneNumber": {
            "maxLength": 13,
            "type": "string",
            "description": "Phone number",
            "nullable": true,
            "example": "0121234567"
          },
          "passportNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Passport number",
            "nullable": true,
            "example": "A123456790"
          },
          "type": {
            "$ref": "#/components/schemas/PartyTypeEnum"
          },
          "entityType": {
            "$ref": "#/components/schemas/EntityTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "PartyTypeEnum": {
        "title": "Party Type",
        "enum": [
          null,
          "Purchaser",
          "Seller",
          "Tenant"
        ],
        "type": "String",
        "description": ""
      },
      "PositionLookupAttributesDto": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "property_has_sectional_units": {
            "type": "boolean"
          },
          "has_sectional_units": {
            "type": "boolean"
          },
          "address_id": {
            "type": "string",
            "nullable": true
          },
          "scheme_id": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood_id": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PositionLookupDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "$ref": "#/components/schemas/PositionLookupAttributesDto"
          }
        },
        "additionalProperties": false
      },
      "PriceLeaseTypeEnum": {
        "enum": [
          "New",
          "Renewal"
        ],
        "type": "string",
        "format": "int32"
      },
      "PriceTermEnum": {
        "enum": [
          "PerMonth",
          "PerYear"
        ],
        "type": "string",
        "format": "int32"
      },
      "PrincipalDto": {
        "type": "object",
        "properties": {
          "activeNonOperationalBusinessInterests": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "activeNonOperationalInterestsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "activeOperationalBusinessInterests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessInterestDto"
            },
            "nullable": true
          },
          "activeOperationalInterestsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "appointmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "directorType": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "idNo": {
            "type": "string",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "nullable": true
          },
          "previousInterestsCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "resignationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "tenure": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "typeGroup": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyDto": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "erfNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "ERF number",
            "nullable": true,
            "example": "169"
          },
          "propertyType": {
            "$ref": "#/components/schemas/PropertyTypeEnum"
          },
          "legal": {
            "$ref": "#/components/schemas/LegalDto"
          },
          "extraFixtures": {
            "$ref": "#/components/schemas/ExtraFixturesDto"
          },
          "lifestyleFixtures": {
            "$ref": "#/components/schemas/LifestyleFixturesDto"
          },
          "interiorFeatures": {
            "$ref": "#/components/schemas/InteriorFeaturesDto"
          },
          "exteriorFeatures": {
            "$ref": "#/components/schemas/ExteriorFeaturesDto"
          },
          "propertyUse": {
            "$ref": "#/components/schemas/PropertyUseEnum"
          },
          "propertyCategory": {
            "$ref": "#/components/schemas/PropertyTypeCategoryEnum"
          },
          "portion": {
            "type": "string",
            "nullable": true
          },
          "portionOfPortion": {
            "type": "string",
            "nullable": true
          },
          "subPortion": {
            "type": "string",
            "nullable": true
          },
          "remainderOfPortion": {
            "type": "string",
            "nullable": true
          },
          "sectionNumber": {
            "type": "string",
            "description": "Section number",
            "nullable": true,
            "example": "1"
          },
          "doorUnitNumber": {
            "type": "string",
            "description": "Door unit number",
            "nullable": true,
            "example": "1"
          },
          "propertyCenterCoordinates": {
            "$ref": "#/components/schemas/GpsCoordinateDto"
          }
        },
        "additionalProperties": false
      },
      "PropertyExteriorTypeEnum": {
        "enum": [
          "Brick",
          "Clinker",
          "Concrete",
          "FaceBrick",
          "Plaster",
          "Stone",
          "Tile",
          "VacantLand",
          "Wood",
          "Block",
          "Iron",
          "Zincalume"
        ],
        "type": "string",
        "format": "int32"
      },
      "PropertyFindPositionDto": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyFloorTypeEnum": {
        "enum": [
          "Carport",
          "DoubleParking",
          "OnStreetParking",
          "ShadeNetCoveredParking",
          "SingleParking",
          "SecureParking",
          "TandemParking",
          "TripleParking",
          "UndergroundParking",
          "VisitorsParking"
        ],
        "type": "string",
        "format": "int32"
      },
      "PropertyGardenTypeEnum": {
        "enum": [
          "AboveRoad",
          "BackyardAccess",
          "Communal",
          "Greenhouse",
          "Indigenous",
          "Landscaped",
          "Level",
          "Manicured",
          "Overgrown",
          "Rocky",
          "Sloped",
          "Steep",
          "Terraced",
          "Tidy"
        ],
        "type": "string",
        "format": "int32"
      },
      "PropertyLookupDto": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "property_type": {
            "type": "string",
            "nullable": true
          },
          "property_type_name": {
            "type": "string",
            "nullable": true
          },
          "short_address": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood_id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "scheme_id": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/PropertyFindPositionDto"
          }
        },
        "additionalProperties": false
      },
      "PropertyParkingTypeEnum": {
        "enum": [
          "Carport",
          "DoubleParking",
          "OnStreetParking",
          "ShadeNetCoveredParking",
          "SingleParking",
          "SecureParking",
          "TandemParking",
          "TripleParking",
          "UndergroundParking",
          "VisitorsParking"
        ],
        "type": "string",
        "format": "int32"
      },
      "PropertyPositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float"
          },
          "lon": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "PropertyRatePeriodEnum": {
        "enum": [
          "PerMonth",
          "PerYear"
        ],
        "type": "string",
        "format": "int32"
      },
      "PropertyReportAddressDtoV2": {
        "type": "object",
        "properties": {
          "has_deed": {
            "type": "boolean"
          },
          "property_type": {
            "type": "string",
            "nullable": true
          },
          "property_type_name": {
            "type": "string",
            "nullable": true
          },
          "extent": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "erf_number": {
            "type": "string",
            "nullable": true
          },
          "portion_number": {
            "type": "string",
            "nullable": true
          },
          "has_address": {
            "type": "boolean",
            "nullable": true
          },
          "full_address": {
            "type": "string",
            "nullable": true
          },
          "short_address": {
            "type": "string",
            "nullable": true
          },
          "address_id": {
            "type": "string",
            "nullable": true
          },
          "street_id": {
            "type": "string",
            "nullable": true
          },
          "is_inside_scheme": {
            "type": "boolean",
            "nullable": true
          },
          "scheme_id": {
            "nullable": true
          },
          "neighbourhood_id": {
            "type": "string",
            "nullable": true
          },
          "subplace": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "market_area": {
            "type": "string",
            "nullable": true
          },
          "market_area_id": {
            "type": "string",
            "nullable": true
          },
          "municipality": {
            "type": "string",
            "nullable": true
          },
          "municipality_id": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/PropertyReportPositionDtoV2"
          },
          "street_number": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "city_town": {
            "type": "string",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "nullable": true
          },
          "province": {
            "type": "string",
            "nullable": true
          },
          "mapcode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportAge_DistributionDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "min": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "max": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportAmenitiesDtoV2": {
        "type": "object",
        "properties": {
          "schools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportSchoolDtoV2"
            },
            "nullable": true
          },
          "shopping_centres": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportShopping_CentresDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportBondsDtoV2": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "holder": {
            "type": "string",
            "nullable": true
          },
          "registration_date": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportCrimeDtoV2": {
        "type": "object",
        "properties": {
          "crime_index": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "crime_index_estates": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "crime_index_complexes": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportDataDtoV2": {
        "type": "object",
        "properties": {
          "general": {
            "$ref": "#/components/schemas/PropertyReportGeneralDtoV2"
          },
          "growth_sales": {
            "$ref": "#/components/schemas/PropertyReportGrowth_SalesDtoV2"
          },
          "deeds": {
            "$ref": "#/components/schemas/PropertyReportDeedsDtoV2"
          },
          "lifestyle": {
            "$ref": "#/components/schemas/PropertyReportLifestyleDtoV2"
          },
          "risks": {
            "$ref": "#/components/schemas/PropertyReportRisksDtoV2"
          },
          "valuation": {
            "$ref": "#/components/schemas/PropertyReportValuationDtoV2"
          },
          "replacement_cost": {
            "$ref": "#/components/schemas/PropertyReportReplacement_CostDtoV2"
          },
          "property_sizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertySizesDto"
            },
            "nullable": true
          },
          "otps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OtpDto"
            },
            "nullable": true
          },
          "permOtp": {
            "type": "boolean"
          },
          "listings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingDto"
            },
            "nullable": true
          },
          "permListing": {
            "type": "boolean"
          },
          "solarFeasibility": {
            "$ref": "#/components/schemas/PropertyReportSolarDto"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportDeedsDtoV2": {
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/PropertyReportTransferDtoV2"
          },
          "transfer_history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportTransfer_HistoryDtoV2"
            },
            "nullable": true
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportOwnerDtoV2"
            },
            "nullable": true
          },
          "owner_history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportOwner_HistoryDtoV2"
            },
            "nullable": true
          },
          "bonds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportBondsDtoV2"
            },
            "nullable": true
          },
          "endorsements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportDeedsEndorsementsDtoV2"
            },
            "nullable": true
          },
          "deedsInfoConsented": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportDeedsEndorsementsDtoV2": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportDemographicsDtoV2": {
        "type": "object",
        "properties": {
          "households": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "day": {
            "$ref": "#/components/schemas/PropertyReportDemographicsTimeDtoV2"
          },
          "night": {
            "$ref": "#/components/schemas/PropertyReportDemographicsTimeDtoV2"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportDemographicsTimeDtoV2": {
        "type": "object",
        "properties": {
          "population": {
            "$ref": "#/components/schemas/PropertyReportPopulationDtoV2"
          },
          "age_distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportAge_DistributionDtoV2"
            },
            "nullable": true
          },
          "gender_distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportGender_DistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportDolomite_RiskDtoV2": {
        "type": "object",
        "properties": {
          "risk_category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "report": {
            "$ref": "#/components/schemas/PropertyReportDataDtoV2"
          },
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportSalesDtoV2"
            },
            "nullable": true
          },
          "userSales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportUserSalesDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportEscalation_RatesDtoV2": {
        "type": "object",
        "properties": {
          "year": {
            "type": "string",
            "nullable": true
          },
          "quarter": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quarter_date": {
            "type": "string",
            "nullable": true
          },
          "escalation_rate": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "escalation_rate_effective": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportFlood_Ponding_RiskDtoV2": {
        "type": "object",
        "properties": {
          "risk_index": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "risk_index_scaled": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "risk_category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportFull_TitleDtoV2": {
        "type": "object",
        "properties": {
          "property_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "average_valuation_confidence": {
            "type": "string",
            "nullable": true
          },
          "escalation_rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportEscalation_RatesDtoV2"
            },
            "nullable": true
          },
          "sales_history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportSales_HistoryDtoV2"
            },
            "nullable": true
          },
          "valuation_distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportValuation_DistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportGender_DistributionDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportGeneralDtoV2": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/PropertyReportAddressDtoV2"
          },
          "structure_extent": {
            "$ref": "#/components/schemas/PropertyReportStructure_ExtentDtoV2"
          },
          "legalDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportGetPropertyRequestDto": {
        "type": "object",
        "properties": {
          "unitNumber": {
            "type": "string",
            "description": "Unit number(00000 if not a unit)",
            "nullable": true,
            "example": "00001"
          },
          "propertyKey": {
            "type": "string",
            "description": "Property key(SG Code)",
            "nullable": true,
            "example": "T0JR00000000000000000"
          },
          "includeOwnerCellNumbers": {
            "type": "boolean",
            "description": "Include owner cell numbers",
            "format": "bool",
            "example": "true"
          },
          "consented": {
            "type": "boolean",
            "description": "Consented",
            "format": "bool",
            "example": "true"
          },
          "purchaseValuation": {
            "type": "boolean",
            "description": "Purchase valuation",
            "format": "bool",
            "example": "true"
          },
          "includeOwnerEmails": {
            "type": "boolean",
            "description": "Include owner email addresses",
            "format": "bool",
            "example": "true"
          },
          "cachedReport": {
            "type": "boolean",
            "description": "Load cached report if available",
            "format": "bool",
            "example": "false"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportGetPropertyRequestDtoExtended": {
        "type": "object",
        "properties": {
          "unitNumber": {
            "type": "string",
            "description": "Unit number(00000 if not a unit)",
            "nullable": true,
            "example": "00001"
          },
          "propertyKey": {
            "type": "string",
            "description": "Property key(SG Code)",
            "nullable": true,
            "example": "T0JR00000000000000000"
          },
          "includeOwnerCellNumbers": {
            "type": "boolean",
            "description": "Include owner cell numbers",
            "format": "bool",
            "example": "true"
          },
          "consented": {
            "type": "boolean",
            "description": "Consented",
            "format": "bool",
            "example": "true"
          },
          "purchaseValuation": {
            "type": "boolean",
            "description": "Purchase valuation",
            "format": "bool",
            "example": "true"
          },
          "includeOwnerEmails": {
            "type": "boolean",
            "description": "Include owner email addresses",
            "format": "bool",
            "example": "true"
          },
          "cachedReport": {
            "type": "boolean",
            "description": "Load cached report if available",
            "format": "bool",
            "example": "false"
          },
          "sections": {
            "type": "string",
            "description": "Comma Seperated Sections (Only needed for custom report)",
            "format": "string",
            "nullable": true,
            "example": "propertyDetails,propertySummaryDescription,otherDetails,floorSizeCalculator,ownership,recentSalesAndRegistrations,salesHistoryInArea,averageQuarterlyGrowthRates,lOOMEstimation,listingInformation,confirmedSalesInformation,suburbTrends,nearbyServices,householdFinancialIndex,suburbPopulation,crimeStatistics,weather,solarFeasibility"
          },
          "reportType": {
            "$ref": "#/components/schemas/PropertyReportTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportGrowth_SalesDtoV2": {
        "type": "object",
        "properties": {
          "full_title": {
            "$ref": "#/components/schemas/PropertyReportFull_TitleDtoV2"
          },
          "sectional_title": {
            "$ref": "#/components/schemas/PropertyReportFull_TitleDtoV2"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportHousehold_Financial_IndexDtoV2": {
        "type": "object",
        "properties": {
          "income_class_distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportIncome_Class_DistributionDtoV2"
            },
            "nullable": true
          },
          "average_income_class": {
            "type": "string",
            "nullable": true
          },
          "highest_frequency_income_class": {
            "type": "string",
            "nullable": true
          },
          "confidence": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportHumidityDtoV2": {
        "type": "object",
        "properties": {
          "daytime_average": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "nighttime_average": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "total_average": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "readOnly": true
          },
          "months": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportHumidityMonthDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportHumidityMonthDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "day_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "night_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportIncome_Class_DistributionDtoV2": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "percentage": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportLifestyleDtoV2": {
        "type": "object",
        "properties": {
          "amenities": {
            "$ref": "#/components/schemas/PropertyReportAmenitiesDtoV2"
          },
          "crime": {
            "$ref": "#/components/schemas/PropertyReportCrimeDtoV2"
          },
          "demographics": {
            "$ref": "#/components/schemas/PropertyReportDemographicsDtoV2"
          },
          "household_financial_index": {
            "$ref": "#/components/schemas/PropertyReportHousehold_Financial_IndexDtoV2"
          },
          "services": {
            "$ref": "#/components/schemas/PropertyReportServicesDtoV2"
          },
          "weather": {
            "$ref": "#/components/schemas/PropertyReportWeatherDtoV2"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportMMADtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "minimum_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "maximum_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportOwnerDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "marital_status": {
            "type": "string",
            "nullable": true
          },
          "cell_number": {
            "type": "string",
            "nullable": true
          },
          "numberError": {
            "type": "boolean"
          },
          "numberErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "emailError": {
            "type": "boolean"
          },
          "emailErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "confidence": {
            "type": "integer",
            "format": "int32"
          },
          "consent_Date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "selected": {
            "type": "boolean"
          },
          "hasConsent": {
            "type": "boolean"
          },
          "emailConfidence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "emailConsent_Date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "hasEmailConsent": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportOwner_HistoryDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "title_deed": {
            "type": "string",
            "nullable": true
          },
          "sell_date": {
            "type": "string",
            "nullable": true
          },
          "sell_price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "registration_date": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportPopulationDtoV2": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "density": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "density_classification": {
            "type": "string",
            "nullable": true
          },
          "density_classification_rs": {
            "type": "string",
            "nullable": true
          },
          "migration_in": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "migration_out": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportPositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportPrecipitationDtoV2": {
        "type": "object",
        "properties": {
          "annual_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "monthly_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "month_minimum_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "month_maximum_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "month_range": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "third_quartile": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "months": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportPrecipitationMonthDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportPrecipitationMonthDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "average": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportReplacement_CostDtoV2": {
        "type": "object",
        "properties": {
          "estimate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "confidence": {
            "type": "string",
            "nullable": true
          },
          "valuation_purchased": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportRisksDtoV2": {
        "type": "object",
        "properties": {
          "dolomite_risk": {
            "$ref": "#/components/schemas/PropertyReportDolomite_RiskDtoV2"
          },
          "flood_ponding_risk": {
            "$ref": "#/components/schemas/PropertyReportFlood_Ponding_RiskDtoV2"
          },
          "thatch_flammability_risk": {
            "$ref": "#/components/schemas/PropertyReportThatch_Flammability_RiskDtoV2"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportSalesDtoV2": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "property_type": {
            "type": "string",
            "nullable": true
          },
          "property_type_name": {
            "type": "string",
            "nullable": true
          },
          "erf_number": {
            "type": "string",
            "nullable": true
          },
          "stand_size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "building_size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sell_date": {
            "type": "string",
            "nullable": true
          },
          "sell_price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "sell_price_description": {
            "type": "string",
            "nullable": true
          },
          "registration_date": {
            "type": "string",
            "nullable": true
          },
          "full_address": {
            "type": "string",
            "nullable": true
          },
          "short_address": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood_id": {
            "type": "string",
            "nullable": true
          },
          "scheme_id": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/MapPropertyReportSalesPositionDtoV2"
          },
          "distance_to_source": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportSales_HistoryDtoV2": {
        "type": "object",
        "properties": {
          "year": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "average_selling_price": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "median_selling_price": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportSavedDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "report": {
            "$ref": "#/components/schemas/PropertyReportDataDtoV2"
          },
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportSalesDtoV2"
            },
            "nullable": true
          },
          "userSales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportUserSalesDto"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "valuation_purchased": {
            "type": "boolean"
          },
          "deeds_info_consented": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportSchoolDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "phase": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/PropertyReportPositionDtoV2"
          },
          "distance_to_source": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportServicesDtoV2": {
        "type": "object",
        "properties": {
          "police_station": {
            "$ref": "#/components/schemas/PropertyServiceInformationDtoV2"
          },
          "fire_brigade": {
            "$ref": "#/components/schemas/PropertyServiceInformationDtoV2"
          },
          "public_hospital": {
            "$ref": "#/components/schemas/PropertyServiceInformationDtoV2"
          },
          "private_hospital": {
            "$ref": "#/components/schemas/PropertyServiceInformationDtoV2"
          },
          "informal_settlement": {
            "$ref": "#/components/schemas/PropertyServiceInformationDtoV2"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportShopping_CentresDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/PropertyReportPositionDtoV2"
          },
          "distance_to_source": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportSolarDto": {
        "type": "object",
        "properties": {
          "feasibility_index": {
            "type": "number",
            "description": "Feasibility index (0-1)",
            "format": "float",
            "nullable": true,
            "example": "0.96336854"
          },
          "feasibility_classification": {
            "type": "string",
            "description": "Feasibility classification",
            "nullable": true,
            "example": "Excellent"
          },
          "usable_roof_size": {
            "type": "integer",
            "description": "Feasibility index",
            "format": "int",
            "nullable": true,
            "example": "156"
          },
          "suggested_system_size": {
            "type": "string",
            "description": "Suggested system size",
            "nullable": true,
            "example": "Extra Large"
          },
          "suggested_system_size_panels": {
            "type": "integer",
            "description": "Suggested system size panels",
            "format": "int",
            "nullable": true,
            "example": "36"
          },
          "max_kw_per_day": {
            "type": "integer",
            "description": "Max kw per day",
            "format": "int",
            "nullable": true,
            "example": "121"
          },
          "max_kw_per_month": {
            "type": "integer",
            "description": "Max kw per month",
            "format": "int",
            "nullable": true,
            "example": "3656"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportStructure_ExtentDtoV2": {
        "type": "object",
        "properties": {
          "stand_size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "building_size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "building_to_stand_ratio": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "building_floor_size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "building_floor_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportSunshineDtoV2": {
        "type": "object",
        "properties": {
          "annual_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "months": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportSunshineMonthDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportSunshineMonthDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "average": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportTemperatureDtoV2": {
        "type": "object",
        "properties": {
          "annual_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "annual_minimum_average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "annual_maximum_average": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "annual_difference": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "month_minimum_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "month_maximum_average": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "months": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyReportMMADtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportThatch_Flammability_RiskDtoV2": {
        "type": "object",
        "properties": {
          "risk_category": {
            "type": "string",
            "nullable": true
          },
          "has_thatch_roof": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportTransferDtoV2": {
        "type": "object",
        "properties": {
          "property_type": {
            "type": "string",
            "nullable": true
          },
          "property_type_name": {
            "type": "string",
            "nullable": true
          },
          "extent": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "erf_number": {
            "type": "string",
            "nullable": true
          },
          "portion_number": {
            "type": "string",
            "nullable": true
          },
          "title_deed": {
            "type": "string",
            "nullable": true
          },
          "sell_date": {
            "type": "string",
            "nullable": true
          },
          "sell_price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "registration_date": {
            "type": "string",
            "nullable": true
          },
          "scheme_name": {
            "type": "string",
            "nullable": true
          },
          "scheme_number": {
            "type": "string",
            "nullable": true
          },
          "office": {
            "type": "string",
            "nullable": true
          },
          "authority_name": {
            "type": "string",
            "nullable": true
          },
          "town_name": {
            "type": "string",
            "nullable": true
          },
          "township_code": {
            "type": "string",
            "nullable": true
          },
          "township_number": {
            "type": "string",
            "nullable": true
          },
          "diagram_number": {
            "type": "string",
            "nullable": true
          },
          "previous_description": {
            "type": "string",
            "nullable": true
          },
          "capture_date": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportTransfer_HistoryDtoV2": {
        "type": "object",
        "properties": {
          "sell_date": {
            "type": "string",
            "nullable": true
          },
          "sell_price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "registration_date": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "adjustment": {
            "$ref": "#/components/schemas/MapPropertyReportTransfer_AdjustmentV2Dto"
          }
        },
        "additionalProperties": false
      },
      "PropertyReportTypeEnum": {
        "enum": [
          "FullReport",
          "QuickReport",
          "CustomReport",
          "ImportReport"
        ],
        "type": "string",
        "format": "int32"
      },
      "PropertyReportUserSalesDto": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportValuationDtoV2": {
        "type": "object",
        "properties": {
          "has_valuation": {
            "type": "boolean",
            "readOnly": true
          },
          "dateString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "confidence": {
            "type": "string",
            "nullable": true
          },
          "estimate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "low_estimate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "high_estimate": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "empty_property": {
            "type": "boolean",
            "nullable": true
          },
          "valuation_purchased": {
            "type": "boolean"
          },
          "subplace_valuation_bucket": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportValuation_DistributionDtoV2": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyReportWeatherDtoV2": {
        "type": "object",
        "properties": {
          "hail_days": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lightning_density": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "humidity": {
            "$ref": "#/components/schemas/PropertyReportHumidityDtoV2"
          },
          "precipitation": {
            "$ref": "#/components/schemas/PropertyReportPrecipitationDtoV2"
          },
          "sunshine": {
            "$ref": "#/components/schemas/PropertyReportSunshineDtoV2"
          },
          "temperature": {
            "$ref": "#/components/schemas/PropertyReportTemperatureDtoV2"
          }
        },
        "additionalProperties": false
      },
      "PropertyRoofTypeEnum": {
        "enum": [
          "Aluminium",
          "Asbestos",
          "Concrete",
          "Iron",
          "Slate",
          "Thatch",
          "Tile",
          "VacantLand",
          "ColourSteel"
        ],
        "type": "string",
        "format": "int32"
      },
      "PropertyServiceInformationDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "distance": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "distance_route": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertySizesDto": {
        "type": "object",
        "properties": {
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SizeCoordinatesDto"
            },
            "nullable": true
          },
          "squareMetres": {
            "type": "number",
            "description": "Building extent",
            "format": "double",
            "example": "30"
          },
          "floors": {
            "type": "integer",
            "description": "Floors",
            "format": "int",
            "example": "1"
          },
          "active": {
            "type": "boolean",
            "description": "Active",
            "format": "bool",
            "example": "true"
          }
        },
        "additionalProperties": false
      },
      "PropertyTitleEnum": {
        "enum": [
          "SectionalTitle",
          "Freehold",
          "ShareBlock",
          "Leasehold",
          "LifeRights"
        ],
        "type": "string",
        "format": "int32"
      },
      "PropertyTypeCategoryEnum": {
        "title": "Property Type Category",
        "enum": [
          null,
          "Full_title",
          "Sectional_title"
        ],
        "type": "String",
        "description": ""
      },
      "PropertyTypeEnum": {
        "title": "Property Type",
        "enum": [
          null,
          "Duet",
          "House",
          "Apartment",
          "Plot",
          "VacantLand",
          "Farm",
          "Commercial",
          "Stack",
          "Townhouse",
          "Industrial",
          "NormalResidential",
          "SmallHoldingsResidential",
          "SectionalTitle",
          "DuetsSectionalTitle",
          "DuetsFullTitle",
          "ApartmentBlock",
          "BedAndBreakfast",
          "Building",
          "Bungalow",
          "Club",
          "Cluster",
          "Compound",
          "Detached",
          "Duplex",
          "EquestrianProperty",
          "Flat",
          "Freehold",
          "Freestanding",
          "FullFloor",
          "GardenCottage",
          "GatedEstate",
          "GolfEstate",
          "GuestHouse",
          "HalfFloor",
          "HotelRoom",
          "LabourCamp",
          "Leaseback",
          "Lodge",
          "Maisonette",
          "PackageHome",
          "Penthouse",
          "RetirementUnit",
          "Room",
          "SemiDetached",
          "Simplex",
          "StudioApartment",
          "Villa",
          "AgriculturalHolding",
          "AirportHanger",
          "ApartmentFlat",
          "BachelorFlat",
          "BackPackers",
          "Business",
          "CommercialAndIndustrial",
          "CommercialFarm",
          "CommercialProperty",
          "Estate",
          "Factory",
          "Flex",
          "GameFarm",
          "GameLodge",
          "GatedVillage",
          "GuestFarm",
          "Hotel",
          "HuntingLodge",
          "IndustrialYard",
          "Investment",
          "Land",
          "LeisureAndHotels",
          "LifestyleFarm",
          "LightManufacturing",
          "Loft",
          "Mall",
          "Manufacturing",
          "MedicalCentre",
          "MedicalSuite",
          "MiniFactory",
          "MultiFamilyApartmentsFlats",
          "Office",
          "OfficeBuilding",
          "OtherCommercial",
          "OtherIndustrial",
          "PlaceOfWorship",
          "RAndD",
          "RefrigerationOrColdStorage",
          "Retail",
          "RetailAndOffice",
          "RetailSpace",
          "ServiceStation",
          "ServicedOffice",
          "Shareblock",
          "Showroom",
          "StorageUnit",
          "Studio",
          "Tourism",
          "TrainingFacility",
          "Warehouse",
          "WarehouseDistribution",
          "WildlifeEstate",
          "Workshop"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided type is not listed above"
      },
      "PropertyUseEnum": {
        "title": "Property Use",
        "enum": [
          null,
          "MainResidence",
          "HolidayResidence",
          "InvestmentRental",
          "OtherOccupiedSelf",
          "OtherOccupiedTenants",
          "ResidentialWithBusinessRights"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided use is not listed above"
      },
      "PropertyWallingTypeEnum": {
        "enum": [
          "ChickenWire",
          "Electric",
          "FaceBrick",
          "FullyFenced",
          "FullyWalled",
          "Palisade",
          "PartlyFenced",
          "PartlyWalled",
          "Precast",
          "VacantLand",
          "Open",
          "ElectricFence"
        ],
        "type": "string",
        "format": "int32"
      },
      "RealestateDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "Agency1"
          },
          "branch": {
            "maxLength": 50,
            "type": "string",
            "description": "Branch code",
            "nullable": true,
            "example": "Pretoria"
          },
          "registrationNumber": {
            "maxLength": 14,
            "type": "string",
            "description": "Registration number",
            "nullable": true,
            "example": "0000/000000/00"
          },
          "vatNumber": {
            "maxLength": 10,
            "type": "string",
            "description": "VAT number",
            "nullable": true,
            "example": "1234567890"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          }
        },
        "additionalProperties": false
      },
      "ReportBucketClassDtoV2": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "midpoint": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportBucketDtoV2": {
        "type": "object",
        "properties": {
          "valuation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportBucketClassDtoV2"
            },
            "nullable": true
          },
          "building_size": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportBucketClassDtoV2"
            },
            "nullable": true
          },
          "stand_size": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportBucketClassDtoV2"
            },
            "nullable": true
          },
          "owner_age": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportBucketClassDtoV2"
            },
            "nullable": true
          },
          "registration_age": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportBucketClassDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportDto": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "integer",
            "description": "Report Id",
            "format": "long",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "My Report1"
          },
          "type": {
            "type": "string",
            "description": "Type",
            "nullable": true,
            "example": "Property"
          },
          "versionId": {
            "type": "integer",
            "description": "VersionId",
            "format": "int",
            "nullable": true,
            "example": "1"
          },
          "isVersion": {
            "type": "boolean",
            "description": "Is version",
            "format": "bool",
            "example": "true"
          },
          "createdAt": {
            "type": "string",
            "description": "Date created",
            "format": "date",
            "example": "2020/01/11"
          }
        },
        "additionalProperties": false
      },
      "ReportDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReportRequestResponseDto": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResponseCompanyInformationDto": {
        "type": "object",
        "properties": {
          "latestVatNumber": {
            "type": "string",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "nullable": true
          },
          "activeListings": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "bankAccountsModule": {
            "nullable": true
          },
          "bbbeeModule": {
            "nullable": true
          },
          "companyPhysicalAddress": {
            "type": "string",
            "nullable": true
          },
          "companyPostalAddress": {
            "type": "string",
            "nullable": true
          },
          "companyRegisteredAddress": {
            "$ref": "#/components/schemas/CommercialAddressDto"
          },
          "companyScoreModule": {
            "$ref": "#/components/schemas/CompanyScoreModuleDto"
          },
          "contactDetails": {
            "$ref": "#/components/schemas/ContactDetailsDto"
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "courtNoticesModule": {
            "nullable": true
          },
          "creditEnquiryHistoryModule": {
            "nullable": true
          },
          "customerReferences": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "dateCommenced": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "directorshipsModule": {
            "$ref": "#/components/schemas/DirectorshipsModuleDto"
          },
          "divisionName": {
            "type": "string",
            "nullable": true
          },
          "entityClass": {
            "type": "string",
            "nullable": true
          },
          "entityID": {
            "type": "string",
            "nullable": true
          },
          "entityName": {
            "type": "string",
            "nullable": true
          },
          "entityNameHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityNameHistoryDto"
            },
            "nullable": true
          },
          "financialFigures": {
            "nullable": true
          },
          "financialYearEnd": {
            "type": "string",
            "nullable": true
          },
          "history": {
            "nullable": true
          },
          "officersAndProfessionalServicesModule": {
            "nullable": true
          },
          "onlinePresenceModule": {
            "nullable": true
          },
          "operationalActivitiesModule": {
            "nullable": true
          },
          "operationalFootprintModule": {
            "nullable": true
          },
          "ownershipModule": {
            "nullable": true
          },
          "physicalAddress": {
            "$ref": "#/components/schemas/CommercialAddressDto"
          },
          "postalAddress": {
            "$ref": "#/components/schemas/CommercialAddressDto"
          },
          "registeredAddress": {
            "type": "string",
            "nullable": true
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "statusOther": {
            "type": "string",
            "nullable": true
          },
          "taxClearanceModule": {
            "nullable": true
          },
          "taxInformationModule": {
            "nullable": true
          },
          "tradeReferences": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "tradingAs": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "typeOther": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResponseTrustSearchDto": {
        "type": "object",
        "properties": {
          "enquiryID": {
            "type": "string",
            "nullable": true
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultDto"
            },
            "nullable": true
          },
          "reportId": {
            "type": "integer",
            "format": "int64"
          },
          "searchId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ResultDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "age": {
            "type": "string",
            "nullable": true
          },
          "authDate": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "fullNames": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "idNo": {
            "type": "string",
            "nullable": true
          },
          "maidenName": {
            "type": "string",
            "nullable": true
          },
          "mastersOffice": {
            "type": "string",
            "nullable": true
          },
          "recordDate": {
            "type": "string",
            "nullable": true
          },
          "representing": {
            "type": "string",
            "nullable": true
          },
          "secondName": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "thirdName": {
            "type": "string",
            "nullable": true
          },
          "trn": {
            "type": "string",
            "nullable": true
          },
          "trustee": {
            "type": "string",
            "nullable": true
          },
          "trustName": {
            "type": "string",
            "nullable": true
          },
          "trustNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RiskskapePropertyDtoV2": {
        "type": "object",
        "properties": {
          "has_deed": {
            "type": "boolean"
          },
          "property_type": {
            "type": "string",
            "nullable": true
          },
          "property_type_name": {
            "type": "string",
            "nullable": true
          },
          "extent": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "erf_number": {
            "type": "string",
            "nullable": true
          },
          "portion_number": {
            "type": "string",
            "nullable": true
          },
          "has_address": {
            "type": "boolean"
          },
          "full_address": {
            "type": "string",
            "nullable": true
          },
          "short_address": {
            "type": "string",
            "nullable": true
          },
          "address_id": {
            "type": "string",
            "nullable": true
          },
          "street_id": {
            "type": "string",
            "nullable": true
          },
          "is_inside_scheme": {
            "type": "boolean"
          },
          "scheme_id": {
            "nullable": true
          },
          "neighbourhood_id": {
            "type": "string",
            "nullable": true
          },
          "subplace": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "market_area": {
            "type": "string",
            "nullable": true
          },
          "market_area_id": {
            "type": "string",
            "nullable": true
          },
          "municipality": {
            "type": "string",
            "nullable": true
          },
          "municipality_id": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/PropertyPositionDtoV2"
          },
          "deedNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeedNameDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoofTypeEnum": {
        "title": "Roof Type",
        "enum": [
          null,
          "Tile",
          "Iron",
          "Slate",
          "Thatch",
          "FlatBrownBuilt",
          "Concrete",
          "FlatIBR",
          "Asbestos",
          "Flat",
          "Insulation"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided type is not listed above"
      },
      "SaleStatusEnum": {
        "title": "Sale Status",
        "enum": [
          null,
          "Available",
          "Underoffer",
          "Sold",
          "Retracted",
          "Valuation",
          "Rented",
          "Archived",
          "Reserved"
        ],
        "type": "String",
        "description": ""
      },
      "SchemeUnitDto": {
        "type": "object",
        "properties": {
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "property_key": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchRequestDto": {
        "type": "object",
        "properties": {
          "registrationNumber": {
            "type": "string",
            "description": "RegistrationNumber",
            "format": "string",
            "nullable": true,
            "example": "YYYY/NNNNNNN/NN"
          },
          "companyName": {
            "type": "string",
            "description": "CompanyName",
            "format": "CompanyName",
            "nullable": true,
            "example": "ABSA"
          },
          "pageNumber": {
            "type": "integer",
            "description": "PageNumber",
            "format": "int"
          }
        },
        "additionalProperties": false
      },
      "SellingReasonEnum": {
        "title": "Selling Reason",
        "enum": [
          null,
          "Default",
          "Death",
          "Divorce",
          "Downsizing",
          "DecreaseInIncome",
          "Distance",
          "Other"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided reason is not listed above"
      },
      "SizeCoordinatesDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude",
            "format": "float",
            "example": "-10.0000"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude",
            "format": "float",
            "example": "10.0000"
          }
        },
        "additionalProperties": false
      },
      "StreetContactDetailRequestModel": {
        "type": "object",
        "properties": {
          "saleAll": {
            "type": "boolean"
          },
          "sale0To1Year": {
            "type": "boolean"
          },
          "sale1To3Years": {
            "type": "boolean"
          },
          "sale3To5Years": {
            "type": "boolean"
          },
          "sale5to8Years": {
            "type": "boolean"
          },
          "sale8PlusYears": {
            "type": "boolean"
          },
          "ageAll": {
            "type": "boolean"
          },
          "age18To35Years": {
            "type": "boolean"
          },
          "age36To49Years": {
            "type": "boolean"
          },
          "age50To65Years": {
            "type": "boolean"
          },
          "age65PlusYears": {
            "type": "boolean"
          },
          "fullTitle": {
            "type": "boolean"
          },
          "sectionalTitle": {
            "type": "boolean"
          },
          "fullNameAndId": {
            "type": "boolean"
          },
          "contactNumber": {
            "type": "boolean"
          },
          "contactEmail": {
            "type": "boolean"
          },
          "reportName": {
            "type": "string",
            "nullable": true
          },
          "onBehalfOfEmail": {
            "type": "string",
            "nullable": true
          },
          "maxNumbers": {
            "type": "integer",
            "format": "int32"
          },
          "propertyKey": {
            "type": "string",
            "description": "Property key (Either PropertyKey and UnitNumber or List of street ids can be passed)",
            "nullable": true
          },
          "unitNumber": {
            "type": "string",
            "description": "Unit number of property (Either PropertyKey and UnitNumber or List of street ids can be passed)",
            "nullable": true
          },
          "consented": {
            "type": "boolean"
          },
          "streetIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of street ids (List of street ids or Either PropertyKey and UnitNumber or can be passed)",
            "nullable": true
          },
          "estimation": {
            "type": "boolean",
            "description": "Only estimate the cost for the request"
          }
        },
        "additionalProperties": false
      },
      "StreetContactDetailResponseModel": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "integer",
            "format": "int32"
          },
          "owners": {
            "type": "integer",
            "format": "int32"
          },
          "requiredCredits": {
            "type": "number",
            "format": "double"
          },
          "availableCredits": {
            "type": "number",
            "format": "double"
          },
          "streetIDs": {
            "type": "string",
            "nullable": true
          },
          "queryID": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "messageCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StreetDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "subplace_streets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetInfoSubplaceSubplace_StreetsDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StreetReportDataDtoV2": {
        "type": "object",
        "properties": {
          "query_id": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "$ref": "#/components/schemas/MapStreetReportPropertiesDtoV2"
          },
          "amenities": {
            "$ref": "#/components/schemas/MapStreetReportAmenityDtoV2"
          },
          "schemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetReportSchemeDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StreetReportDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "$ref": "#/components/schemas/StreetReportDataDtoV2"
          },
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreetReportSalesDtoV2"
            },
            "nullable": true
          },
          "buckets": {
            "$ref": "#/components/schemas/ReportBucketDtoV2"
          },
          "street": {
            "$ref": "#/components/schemas/StreetDtoV2"
          }
        },
        "additionalProperties": false
      },
      "StreetReportSalesDtoV2": {
        "type": "object",
        "properties": {
          "property_key": {
            "type": "string",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "nullable": true
          },
          "property_type": {
            "type": "string",
            "nullable": true
          },
          "property_type_name": {
            "type": "string",
            "nullable": true
          },
          "erf_number": {
            "type": "string",
            "nullable": true
          },
          "stand_size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "building_size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sell_date": {
            "type": "string",
            "nullable": true
          },
          "sell_price": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "sell_price_description": {
            "type": "string",
            "nullable": true
          },
          "registration_date": {
            "type": "string",
            "nullable": true
          },
          "full_address": {
            "type": "string",
            "nullable": true
          },
          "short_address": {
            "type": "string",
            "nullable": true
          },
          "neighbourhood_id": {
            "type": "string",
            "nullable": true
          },
          "scheme_id": {
            "type": "string",
            "nullable": true
          },
          "subplace_id": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/StreetReportSalesPositionDtoV2"
          },
          "distance_to_source": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StreetReportSalesPositionDtoV2": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "lon": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StreetReportSavedDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "$ref": "#/components/schemas/StreetReportDataDtoV2"
          },
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreetReportSalesDtoV2"
            },
            "nullable": true
          },
          "buckets": {
            "$ref": "#/components/schemas/ReportBucketDtoV2"
          },
          "street": {
            "$ref": "#/components/schemas/StreetDtoV2"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "StreetReportStreetRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of street",
            "format": "int64",
            "example": "1"
          }
        },
        "additionalProperties": false
      },
      "StreetUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "subplace_streets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapStreetInfoSubplaceSubplace_StreetsDtoV2"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Id of street",
            "format": "long",
            "example": "1"
          }
        },
        "additionalProperties": false
      },
      "StreetUpdateDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StreetUpdateDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SubplaceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "subplaceID": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "subplaceName": {
            "maxLength": 65,
            "type": "string",
            "nullable": true
          },
          "municipalityID": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "municipalityName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "districtName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "provinceName": {
            "maxLength": 15,
            "type": "string",
            "nullable": true
          },
          "provinceCode": {
            "maxLength": 5,
            "type": "string",
            "nullable": true
          },
          "townName": {
            "maxLength": 55,
            "type": "string",
            "nullable": true
          },
          "riskScapeId": {
            "maxLength": 100,
            "type": "string",
            "format": "uuid"
          },
          "geometryJson": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubplaceListDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "subplaceID": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "subplaceName": {
            "maxLength": 65,
            "type": "string",
            "nullable": true
          },
          "municipalityID": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "municipalityName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "districtName": {
            "maxLength": 35,
            "type": "string",
            "nullable": true
          },
          "provinceName": {
            "maxLength": 15,
            "type": "string",
            "nullable": true
          },
          "provinceCode": {
            "maxLength": 5,
            "type": "string",
            "nullable": true
          },
          "townName": {
            "maxLength": 55,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubplaceListDtoPagedResultDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubplaceListDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "webhookUri": {
            "type": "string",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "webhooks": {
            "type": "string",
            "nullable": true
          },
          "headers": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuburbReportDtoV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "$ref": "#/components/schemas/AreaReportDataDtoV2"
          },
          "sales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AreaReportSalesDtoV2"
            },
            "nullable": true
          },
          "buckets": {
            "$ref": "#/components/schemas/ReportBucketDtoV2"
          },
          "area": {
            "$ref": "#/components/schemas/AreaDto"
          },
          "growth_sales": {
            "$ref": "#/components/schemas/SuburbReport_Growth_SalesDtoV2"
          }
        },
        "additionalProperties": false
      },
      "SuburbReport_Escalation_RatesDtoV2": {
        "type": "object",
        "properties": {
          "year": {
            "type": "string",
            "nullable": true
          },
          "quarter": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quarter_date": {
            "type": "string",
            "nullable": true
          },
          "escalation_rate": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "escalation_rate_effective": {
            "type": "number",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuburbReport_Full_TitleDtoV2": {
        "type": "object",
        "properties": {
          "suburb_count": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "average_valuation_confidence": {
            "type": "string",
            "nullable": true
          },
          "escalation_rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuburbReport_Escalation_RatesDtoV2"
            },
            "nullable": true
          },
          "sales_history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuburbReport_Sales_HistoryDtoV2"
            },
            "nullable": true
          },
          "valuation_distribution": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuburbReport_Valuation_DistributionDtoV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuburbReport_Growth_SalesDtoV2": {
        "type": "object",
        "properties": {
          "full_title": {
            "$ref": "#/components/schemas/SuburbReport_Full_TitleDtoV2"
          },
          "sectional_title": {
            "$ref": "#/components/schemas/SuburbReport_Full_TitleDtoV2"
          }
        },
        "additionalProperties": false
      },
      "SuburbReport_Sales_HistoryDtoV2": {
        "type": "object",
        "properties": {
          "year": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "average_selling_price": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "median_selling_price": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuburbReport_Valuation_DistributionDtoV2": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maximum": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrustDetailsRequestDto": {
        "type": "object",
        "properties": {
          "trustNumber": {
            "type": "string",
            "description": "TrustNumber",
            "format": "string",
            "nullable": true,
            "example": "YYYY/NNNNNNN/NN"
          },
          "trustName": {
            "type": "string",
            "description": "TrustName",
            "format": "string",
            "nullable": true,
            "example": "ABSA"
          },
          "searchId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TrustSearchRequestDto": {
        "type": "object",
        "properties": {
          "trustNumber": {
            "type": "string",
            "description": "TrustNumber",
            "format": "string",
            "nullable": true,
            "example": "YYYY/NNNNNNN/NN"
          },
          "trustName": {
            "type": "string",
            "description": "TrustName",
            "format": "string",
            "nullable": true,
            "example": "ABSA"
          },
          "pageNumber": {
            "type": "integer",
            "description": "PageNumber",
            "format": "int"
          }
        },
        "additionalProperties": false
      },
      "TrustSearchWithFiltersDto": {
        "type": "object",
        "properties": {
          "pageDetailsDto": {
            "$ref": "#/components/schemas/PageDetailsDto"
          },
          "trusteeDto": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrusteeDto"
            },
            "nullable": true
          },
          "searchId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TrusteeContactDto": {
        "required": [
          "idnumber",
          "name",
          "reportid",
          "surname"
        ],
        "type": "object",
        "properties": {
          "idnumber": {
            "maxLength": 15,
            "minLength": 1,
            "type": "string"
          },
          "reportid": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "surname": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string"
          },
          "emailOrContact": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TrusteeContactResponseDto": {
        "type": "object",
        "properties": {
          "contactDetailsResponse": {
            "$ref": "#/components/schemas/ContactDetailsResponseDto"
          },
          "contactEmailsResponse": {
            "$ref": "#/components/schemas/ContactEmailsResponseDto"
          }
        },
        "additionalProperties": false
      },
      "TrusteeDto": {
        "type": "object",
        "properties": {
          "age": {
            "type": "string",
            "nullable": true
          },
          "authDate": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "fullNames": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "idNo": {
            "type": "string",
            "nullable": true
          },
          "maidenName": {
            "type": "string",
            "nullable": true
          },
          "mastersOffice": {
            "type": "string",
            "nullable": true
          },
          "recordDate": {
            "type": "string",
            "nullable": true
          },
          "representing": {
            "type": "string",
            "nullable": true
          },
          "secondName": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "surname": {
            "type": "string",
            "nullable": true
          },
          "thirdName": {
            "type": "string",
            "nullable": true
          },
          "trn": {
            "type": "string",
            "nullable": true
          },
          "trustee": {
            "type": "string",
            "nullable": true
          },
          "trustName": {
            "type": "string",
            "nullable": true
          },
          "trustNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateListingDto": {
        "required": [
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "maxLength": 24,
            "type": "string",
            "description": "Property id(SG Code)",
            "nullable": true,
            "example": "L1"
          },
          "sourceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique key from the source",
            "example": "FEE12345"
          },
          "details": {
            "$ref": "#/components/schemas/ListingDetailsDto"
          },
          "property": {
            "$ref": "#/components/schemas/PropertyDto"
          },
          "seller": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          },
          "tenant": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateOtpDto": {
        "required": [
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique key from the source",
            "example": "1"
          },
          "propertyId": {
            "maxLength": 24,
            "type": "string",
            "description": "Property id (SG Code)",
            "nullable": true,
            "example": "L1"
          },
          "agent": {
            "$ref": "#/components/schemas/AgentDto"
          },
          "property": {
            "$ref": "#/components/schemas/PropertyDto"
          },
          "offer": {
            "$ref": "#/components/schemas/OfferDto"
          },
          "parties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyDto"
            },
            "nullable": true
          },
          "applicationStatus": {
            "$ref": "#/components/schemas/ApplicationStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "UploadListingImageDto": {
        "required": [
          "base64Image",
          "imageType",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "imageType": {
            "$ref": "#/components/schemas/ImageTypeEnum"
          },
          "sourceId": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "Unique key from the source",
            "example": "FEE12345"
          },
          "base64Image": {
            "minLength": 1,
            "type": "string",
            "description": "Base64 Image",
            "example": "Base64String"
          }
        },
        "additionalProperties": false
      },
      "VideoStreamingPlatformEnum": {
        "enum": [
          "YouTube",
          "Vimeo"
        ],
        "type": "string",
        "format": "int32"
      },
      "WallEnum": {
        "title": "Wall",
        "enum": [
          null,
          "Stone",
          "Asbestos",
          "Iron",
          "Wood",
          "Concrete",
          "FaceBrick",
          "Plaster"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided wall is not listed above"
      },
      "WindowFrameEnum": {
        "title": "Wall",
        "enum": [
          null,
          "Steel",
          "Wood",
          "Aluminum",
          "Lead",
          "Skylight"
        ],
        "type": "String",
        "description": "Please contact LOOM If your provided wall is not listed above"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://id.loom.co.za/connect/authorize",
            "tokenUrl": "https://id.loom.co.za/connect/token",
            "scopes": {
              "ibilling-api": "iBilling Default API"
            }
          }
        }
      }
    }
  }
}